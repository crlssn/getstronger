// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Exercise is an object representing the database table.
type Exercise struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title     string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	SubTitle  null.String `boil:"sub_title" json:"sub_title,omitempty" toml:"sub_title" yaml:"sub_title,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *exerciseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exerciseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExerciseColumns = struct {
	ID        string
	UserID    string
	Title     string
	SubTitle  string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	Title:     "title",
	SubTitle:  "sub_title",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

var ExerciseTableColumns = struct {
	ID        string
	UserID    string
	Title     string
	SubTitle  string
	CreatedAt string
	DeletedAt string
}{
	ID:        "exercises.id",
	UserID:    "exercises.user_id",
	Title:     "exercises.title",
	SubTitle:  "exercises.sub_title",
	CreatedAt: "exercises.created_at",
	DeletedAt: "exercises.deleted_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ExerciseWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperstring
	Title     whereHelperstring
	SubTitle  whereHelpernull_String
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"getstronger\".\"exercises\".\"id\""},
	UserID:    whereHelperstring{field: "\"getstronger\".\"exercises\".\"user_id\""},
	Title:     whereHelperstring{field: "\"getstronger\".\"exercises\".\"title\""},
	SubTitle:  whereHelpernull_String{field: "\"getstronger\".\"exercises\".\"sub_title\""},
	CreatedAt: whereHelpertime_Time{field: "\"getstronger\".\"exercises\".\"created_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"getstronger\".\"exercises\".\"deleted_at\""},
}

// ExerciseRels is where relationship names are stored.
var ExerciseRels = struct {
	User     string
	Routines string
	Sets     string
}{
	User:     "User",
	Routines: "Routines",
	Sets:     "Sets",
}

// exerciseR is where relationships are stored.
type exerciseR struct {
	User     *User        `boil:"User" json:"User" toml:"User" yaml:"User"`
	Routines RoutineSlice `boil:"Routines" json:"Routines" toml:"Routines" yaml:"Routines"`
	Sets     SetSlice     `boil:"Sets" json:"Sets" toml:"Sets" yaml:"Sets"`
}

// NewStruct creates a new relationship struct
func (*exerciseR) NewStruct() *exerciseR {
	return &exerciseR{}
}

func (r *exerciseR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *exerciseR) GetRoutines() RoutineSlice {
	if r == nil {
		return nil
	}
	return r.Routines
}

func (r *exerciseR) GetSets() SetSlice {
	if r == nil {
		return nil
	}
	return r.Sets
}

// exerciseL is where Load methods for each relationship are stored.
type exerciseL struct{}

var (
	exerciseAllColumns            = []string{"id", "user_id", "title", "sub_title", "created_at", "deleted_at"}
	exerciseColumnsWithoutDefault = []string{"user_id", "title"}
	exerciseColumnsWithDefault    = []string{"id", "sub_title", "created_at", "deleted_at"}
	exercisePrimaryKeyColumns     = []string{"id"}
	exerciseGeneratedColumns      = []string{}
)

type (
	// ExerciseSlice is an alias for a slice of pointers to Exercise.
	// This should almost always be used instead of []Exercise.
	ExerciseSlice []*Exercise
	// ExerciseHook is the signature for custom Exercise hook methods
	ExerciseHook func(context.Context, boil.ContextExecutor, *Exercise) error

	exerciseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exerciseType                 = reflect.TypeOf(&Exercise{})
	exerciseMapping              = queries.MakeStructMapping(exerciseType)
	exercisePrimaryKeyMapping, _ = queries.BindMapping(exerciseType, exerciseMapping, exercisePrimaryKeyColumns)
	exerciseInsertCacheMut       sync.RWMutex
	exerciseInsertCache          = make(map[string]insertCache)
	exerciseUpdateCacheMut       sync.RWMutex
	exerciseUpdateCache          = make(map[string]updateCache)
	exerciseUpsertCacheMut       sync.RWMutex
	exerciseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var exerciseAfterSelectMu sync.Mutex
var exerciseAfterSelectHooks []ExerciseHook

var exerciseBeforeInsertMu sync.Mutex
var exerciseBeforeInsertHooks []ExerciseHook
var exerciseAfterInsertMu sync.Mutex
var exerciseAfterInsertHooks []ExerciseHook

var exerciseBeforeUpdateMu sync.Mutex
var exerciseBeforeUpdateHooks []ExerciseHook
var exerciseAfterUpdateMu sync.Mutex
var exerciseAfterUpdateHooks []ExerciseHook

var exerciseBeforeDeleteMu sync.Mutex
var exerciseBeforeDeleteHooks []ExerciseHook
var exerciseAfterDeleteMu sync.Mutex
var exerciseAfterDeleteHooks []ExerciseHook

var exerciseBeforeUpsertMu sync.Mutex
var exerciseBeforeUpsertHooks []ExerciseHook
var exerciseAfterUpsertMu sync.Mutex
var exerciseAfterUpsertHooks []ExerciseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Exercise) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Exercise) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Exercise) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Exercise) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Exercise) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Exercise) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Exercise) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Exercise) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Exercise) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExerciseHook registers your hook function for all future operations.
func AddExerciseHook(hookPoint boil.HookPoint, exerciseHook ExerciseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		exerciseAfterSelectMu.Lock()
		exerciseAfterSelectHooks = append(exerciseAfterSelectHooks, exerciseHook)
		exerciseAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		exerciseBeforeInsertMu.Lock()
		exerciseBeforeInsertHooks = append(exerciseBeforeInsertHooks, exerciseHook)
		exerciseBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		exerciseAfterInsertMu.Lock()
		exerciseAfterInsertHooks = append(exerciseAfterInsertHooks, exerciseHook)
		exerciseAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		exerciseBeforeUpdateMu.Lock()
		exerciseBeforeUpdateHooks = append(exerciseBeforeUpdateHooks, exerciseHook)
		exerciseBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		exerciseAfterUpdateMu.Lock()
		exerciseAfterUpdateHooks = append(exerciseAfterUpdateHooks, exerciseHook)
		exerciseAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		exerciseBeforeDeleteMu.Lock()
		exerciseBeforeDeleteHooks = append(exerciseBeforeDeleteHooks, exerciseHook)
		exerciseBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		exerciseAfterDeleteMu.Lock()
		exerciseAfterDeleteHooks = append(exerciseAfterDeleteHooks, exerciseHook)
		exerciseAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		exerciseBeforeUpsertMu.Lock()
		exerciseBeforeUpsertHooks = append(exerciseBeforeUpsertHooks, exerciseHook)
		exerciseBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		exerciseAfterUpsertMu.Lock()
		exerciseAfterUpsertHooks = append(exerciseAfterUpsertHooks, exerciseHook)
		exerciseAfterUpsertMu.Unlock()
	}
}

// One returns a single exercise record from the query.
func (q exerciseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Exercise, error) {
	o := &Exercise{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for exercises")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Exercise records from the query.
func (q exerciseQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExerciseSlice, error) {
	var o []*Exercise

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Exercise slice")
	}

	if len(exerciseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Exercise records in the query.
func (q exerciseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count exercises rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exerciseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if exercises exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Exercise) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Routines retrieves all the routine's Routines with an executor.
func (o *Exercise) Routines(mods ...qm.QueryMod) routineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"getstronger\".\"exercises_routines\" on \"getstronger\".\"routines\".\"id\" = \"getstronger\".\"exercises_routines\".\"routine_id\""),
		qm.Where("\"getstronger\".\"exercises_routines\".\"exercise_id\"=?", o.ID),
	)

	return Routines(queryMods...)
}

// Sets retrieves all the set's Sets with an executor.
func (o *Exercise) Sets(mods ...qm.QueryMod) setQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"getstronger\".\"sets\".\"exercise_id\"=?", o.ID),
	)

	return Sets(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (exerciseL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExercise interface{}, mods queries.Applicator) error {
	var slice []*Exercise
	var object *Exercise

	if singular {
		var ok bool
		object, ok = maybeExercise.(*Exercise)
		if !ok {
			object = new(Exercise)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExercise)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExercise))
			}
		}
	} else {
		s, ok := maybeExercise.(*[]*Exercise)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExercise)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExercise))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &exerciseR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exerciseR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.users`),
		qm.WhereIn(`getstronger.users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Exercises = append(foreign.R.Exercises, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Exercises = append(foreign.R.Exercises, local)
				break
			}
		}
	}

	return nil
}

// LoadRoutines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (exerciseL) LoadRoutines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExercise interface{}, mods queries.Applicator) error {
	var slice []*Exercise
	var object *Exercise

	if singular {
		var ok bool
		object, ok = maybeExercise.(*Exercise)
		if !ok {
			object = new(Exercise)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExercise)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExercise))
			}
		}
	} else {
		s, ok := maybeExercise.(*[]*Exercise)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExercise)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExercise))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &exerciseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exerciseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"getstronger\".\"routines\".\"id\", \"getstronger\".\"routines\".\"user_id\", \"getstronger\".\"routines\".\"title\", \"getstronger\".\"routines\".\"created_at\", \"getstronger\".\"routines\".\"deleted_at\", \"getstronger\".\"routines\".\"exercise_order\", \"a\".\"exercise_id\""),
		qm.From("\"getstronger\".\"routines\""),
		qm.InnerJoin("\"getstronger\".\"exercises_routines\" as \"a\" on \"getstronger\".\"routines\".\"id\" = \"a\".\"routine_id\""),
		qm.WhereIn("\"a\".\"exercise_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load routines")
	}

	var resultSlice []*Routine

	var localJoinCols []string
	for results.Next() {
		one := new(Routine)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.UserID, &one.Title, &one.CreatedAt, &one.DeletedAt, &one.ExerciseOrder, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for routines")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice routines")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on routines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for routines")
	}

	if len(routineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Routines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routineR{}
			}
			foreign.R.Exercises = append(foreign.R.Exercises, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Routines = append(local.R.Routines, foreign)
				if foreign.R == nil {
					foreign.R = &routineR{}
				}
				foreign.R.Exercises = append(foreign.R.Exercises, local)
				break
			}
		}
	}

	return nil
}

// LoadSets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (exerciseL) LoadSets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExercise interface{}, mods queries.Applicator) error {
	var slice []*Exercise
	var object *Exercise

	if singular {
		var ok bool
		object, ok = maybeExercise.(*Exercise)
		if !ok {
			object = new(Exercise)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExercise)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExercise))
			}
		}
	} else {
		s, ok := maybeExercise.(*[]*Exercise)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExercise)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExercise))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &exerciseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exerciseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.sets`),
		qm.WhereIn(`getstronger.sets.exercise_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sets")
	}

	var resultSlice []*Set
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sets")
	}

	if len(setAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Sets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &setR{}
			}
			foreign.R.Exercise = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExerciseID {
				local.R.Sets = append(local.R.Sets, foreign)
				if foreign.R == nil {
					foreign.R = &setR{}
				}
				foreign.R.Exercise = local
				break
			}
		}
	}

	return nil
}

// SetUser of the exercise to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Exercises.
func (o *Exercise) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"exercises\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, exercisePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &exerciseR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Exercises: ExerciseSlice{o},
		}
	} else {
		related.R.Exercises = append(related.R.Exercises, o)
	}

	return nil
}

// AddRoutines adds the given related objects to the existing relationships
// of the exercise, optionally inserting them as new records.
// Appends related to o.R.Routines.
// Sets related.R.Exercises appropriately.
func (o *Exercise) AddRoutines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Routine) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"getstronger\".\"exercises_routines\" (\"exercise_id\", \"routine_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &exerciseR{
			Routines: related,
		}
	} else {
		o.R.Routines = append(o.R.Routines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routineR{
				Exercises: ExerciseSlice{o},
			}
		} else {
			rel.R.Exercises = append(rel.R.Exercises, o)
		}
	}
	return nil
}

// SetRoutines removes all previously related items of the
// exercise replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Exercises's Routines accordingly.
// Replaces o.R.Routines with related.
// Sets related.R.Exercises's Routines accordingly.
func (o *Exercise) SetRoutines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Routine) error {
	query := "delete from \"getstronger\".\"exercises_routines\" where \"exercise_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRoutinesFromExercisesSlice(o, related)
	if o.R != nil {
		o.R.Routines = nil
	}

	return o.AddRoutines(ctx, exec, insert, related...)
}

// RemoveRoutines relationships from objects passed in.
// Removes related items from R.Routines (uses pointer comparison, removal does not keep order)
// Sets related.R.Exercises.
func (o *Exercise) RemoveRoutines(ctx context.Context, exec boil.ContextExecutor, related ...*Routine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"getstronger\".\"exercises_routines\" where \"exercise_id\" = $1 and \"routine_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRoutinesFromExercisesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Routines {
			if rel != ri {
				continue
			}

			ln := len(o.R.Routines)
			if ln > 1 && i < ln-1 {
				o.R.Routines[i] = o.R.Routines[ln-1]
			}
			o.R.Routines = o.R.Routines[:ln-1]
			break
		}
	}

	return nil
}

func removeRoutinesFromExercisesSlice(o *Exercise, related []*Routine) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Exercises {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Exercises)
			if ln > 1 && i < ln-1 {
				rel.R.Exercises[i] = rel.R.Exercises[ln-1]
			}
			rel.R.Exercises = rel.R.Exercises[:ln-1]
			break
		}
	}
}

// AddSets adds the given related objects to the existing relationships
// of the exercise, optionally inserting them as new records.
// Appends related to o.R.Sets.
// Sets related.R.Exercise appropriately.
func (o *Exercise) AddSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Set) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExerciseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"getstronger\".\"sets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exercise_id"}),
				strmangle.WhereClause("\"", "\"", 2, setPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExerciseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &exerciseR{
			Sets: related,
		}
	} else {
		o.R.Sets = append(o.R.Sets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &setR{
				Exercise: o,
			}
		} else {
			rel.R.Exercise = o
		}
	}
	return nil
}

// Exercises retrieves all the records using an executor.
func Exercises(mods ...qm.QueryMod) exerciseQuery {
	mods = append(mods, qm.From("\"getstronger\".\"exercises\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"getstronger\".\"exercises\".*"})
	}

	return exerciseQuery{q}
}

// FindExercise retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExercise(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Exercise, error) {
	exerciseObj := &Exercise{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"getstronger\".\"exercises\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, exerciseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from exercises")
	}

	if err = exerciseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return exerciseObj, err
	}

	return exerciseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Exercise) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no exercises provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exerciseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exerciseInsertCacheMut.RLock()
	cache, cached := exerciseInsertCache[key]
	exerciseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exerciseAllColumns,
			exerciseColumnsWithDefault,
			exerciseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exerciseType, exerciseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exerciseType, exerciseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"getstronger\".\"exercises\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"getstronger\".\"exercises\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into exercises")
	}

	if !cached {
		exerciseInsertCacheMut.Lock()
		exerciseInsertCache[key] = cache
		exerciseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Exercise.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Exercise) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exerciseUpdateCacheMut.RLock()
	cache, cached := exerciseUpdateCache[key]
	exerciseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exerciseAllColumns,
			exercisePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update exercises, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"getstronger\".\"exercises\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, exercisePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exerciseType, exerciseMapping, append(wl, exercisePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update exercises row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for exercises")
	}

	if !cached {
		exerciseUpdateCacheMut.Lock()
		exerciseUpdateCache[key] = cache
		exerciseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exerciseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for exercises")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for exercises")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExerciseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exercisePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"getstronger\".\"exercises\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, exercisePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in exercise slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all exercise")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Exercise) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no exercises provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exerciseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exerciseUpsertCacheMut.RLock()
	cache, cached := exerciseUpsertCache[key]
	exerciseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			exerciseAllColumns,
			exerciseColumnsWithDefault,
			exerciseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			exerciseAllColumns,
			exercisePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert exercises, could not build update column list")
		}

		ret := strmangle.SetComplement(exerciseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(exercisePrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert exercises, could not build conflict column list")
			}

			conflict = make([]string, len(exercisePrimaryKeyColumns))
			copy(conflict, exercisePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"getstronger\".\"exercises\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(exerciseType, exerciseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exerciseType, exerciseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert exercises")
	}

	if !cached {
		exerciseUpsertCacheMut.Lock()
		exerciseUpsertCache[key] = cache
		exerciseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Exercise record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Exercise) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Exercise provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exercisePrimaryKeyMapping)
	sql := "DELETE FROM \"getstronger\".\"exercises\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from exercises")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for exercises")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exerciseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no exerciseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from exercises")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for exercises")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExerciseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(exerciseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exercisePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"getstronger\".\"exercises\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exercisePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from exercise slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for exercises")
	}

	if len(exerciseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Exercise) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExercise(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExerciseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExerciseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exercisePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"getstronger\".\"exercises\".* FROM \"getstronger\".\"exercises\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exercisePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ExerciseSlice")
	}

	*o = slice

	return nil
}

// ExerciseExists checks if the Exercise row exists.
func ExerciseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"getstronger\".\"exercises\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if exercises exists")
	}

	return exists, nil
}

// Exists checks if the Exercise row exists.
func (o *Exercise) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExerciseExists(ctx, exec, o.ID)
}
