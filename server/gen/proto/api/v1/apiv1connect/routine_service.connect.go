// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/routine_service.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/crlssn/getstronger/server/gen/proto/api/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoutineServiceName is the fully-qualified name of the RoutineService service.
	RoutineServiceName = "api.v1.RoutineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoutineServiceCreateRoutineProcedure is the fully-qualified name of the RoutineService's
	// CreateRoutine RPC.
	RoutineServiceCreateRoutineProcedure = "/api.v1.RoutineService/CreateRoutine"
	// RoutineServiceGetRoutineProcedure is the fully-qualified name of the RoutineService's GetRoutine
	// RPC.
	RoutineServiceGetRoutineProcedure = "/api.v1.RoutineService/GetRoutine"
	// RoutineServiceUpdateRoutineProcedure is the fully-qualified name of the RoutineService's
	// UpdateRoutine RPC.
	RoutineServiceUpdateRoutineProcedure = "/api.v1.RoutineService/UpdateRoutine"
	// RoutineServiceDeleteRoutineProcedure is the fully-qualified name of the RoutineService's
	// DeleteRoutine RPC.
	RoutineServiceDeleteRoutineProcedure = "/api.v1.RoutineService/DeleteRoutine"
	// RoutineServiceListRoutinesProcedure is the fully-qualified name of the RoutineService's
	// ListRoutines RPC.
	RoutineServiceListRoutinesProcedure = "/api.v1.RoutineService/ListRoutines"
	// RoutineServiceAddExerciseProcedure is the fully-qualified name of the RoutineService's
	// AddExercise RPC.
	RoutineServiceAddExerciseProcedure = "/api.v1.RoutineService/AddExercise"
	// RoutineServiceRemoveExerciseProcedure is the fully-qualified name of the RoutineService's
	// RemoveExercise RPC.
	RoutineServiceRemoveExerciseProcedure = "/api.v1.RoutineService/RemoveExercise"
	// RoutineServiceUpdateExerciseOrderProcedure is the fully-qualified name of the RoutineService's
	// UpdateExerciseOrder RPC.
	RoutineServiceUpdateExerciseOrderProcedure = "/api.v1.RoutineService/UpdateExerciseOrder"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	routineServiceServiceDescriptor                   = v1.File_api_v1_routine_service_proto.Services().ByName("RoutineService")
	routineServiceCreateRoutineMethodDescriptor       = routineServiceServiceDescriptor.Methods().ByName("CreateRoutine")
	routineServiceGetRoutineMethodDescriptor          = routineServiceServiceDescriptor.Methods().ByName("GetRoutine")
	routineServiceUpdateRoutineMethodDescriptor       = routineServiceServiceDescriptor.Methods().ByName("UpdateRoutine")
	routineServiceDeleteRoutineMethodDescriptor       = routineServiceServiceDescriptor.Methods().ByName("DeleteRoutine")
	routineServiceListRoutinesMethodDescriptor        = routineServiceServiceDescriptor.Methods().ByName("ListRoutines")
	routineServiceAddExerciseMethodDescriptor         = routineServiceServiceDescriptor.Methods().ByName("AddExercise")
	routineServiceRemoveExerciseMethodDescriptor      = routineServiceServiceDescriptor.Methods().ByName("RemoveExercise")
	routineServiceUpdateExerciseOrderMethodDescriptor = routineServiceServiceDescriptor.Methods().ByName("UpdateExerciseOrder")
)

// RoutineServiceClient is a client for the api.v1.RoutineService service.
type RoutineServiceClient interface {
	CreateRoutine(context.Context, *connect.Request[v1.CreateRoutineRequest]) (*connect.Response[v1.CreateRoutineResponse], error)
	GetRoutine(context.Context, *connect.Request[v1.GetRoutineRequest]) (*connect.Response[v1.GetRoutineResponse], error)
	UpdateRoutine(context.Context, *connect.Request[v1.UpdateRoutineRequest]) (*connect.Response[v1.UpdateRoutineResponse], error)
	DeleteRoutine(context.Context, *connect.Request[v1.DeleteRoutineRequest]) (*connect.Response[v1.DeleteRoutineResponse], error)
	ListRoutines(context.Context, *connect.Request[v1.ListRoutinesRequest]) (*connect.Response[v1.ListRoutinesResponse], error)
	AddExercise(context.Context, *connect.Request[v1.AddExerciseRequest]) (*connect.Response[v1.AddExerciseResponse], error)
	RemoveExercise(context.Context, *connect.Request[v1.RemoveExerciseRequest]) (*connect.Response[v1.RemoveExerciseResponse], error)
	UpdateExerciseOrder(context.Context, *connect.Request[v1.UpdateExerciseOrderRequest]) (*connect.Response[v1.UpdateExerciseOrderResponse], error)
}

// NewRoutineServiceClient constructs a client for the api.v1.RoutineService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoutineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoutineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &routineServiceClient{
		createRoutine: connect.NewClient[v1.CreateRoutineRequest, v1.CreateRoutineResponse](
			httpClient,
			baseURL+RoutineServiceCreateRoutineProcedure,
			connect.WithSchema(routineServiceCreateRoutineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoutine: connect.NewClient[v1.GetRoutineRequest, v1.GetRoutineResponse](
			httpClient,
			baseURL+RoutineServiceGetRoutineProcedure,
			connect.WithSchema(routineServiceGetRoutineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRoutine: connect.NewClient[v1.UpdateRoutineRequest, v1.UpdateRoutineResponse](
			httpClient,
			baseURL+RoutineServiceUpdateRoutineProcedure,
			connect.WithSchema(routineServiceUpdateRoutineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRoutine: connect.NewClient[v1.DeleteRoutineRequest, v1.DeleteRoutineResponse](
			httpClient,
			baseURL+RoutineServiceDeleteRoutineProcedure,
			connect.WithSchema(routineServiceDeleteRoutineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRoutines: connect.NewClient[v1.ListRoutinesRequest, v1.ListRoutinesResponse](
			httpClient,
			baseURL+RoutineServiceListRoutinesProcedure,
			connect.WithSchema(routineServiceListRoutinesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addExercise: connect.NewClient[v1.AddExerciseRequest, v1.AddExerciseResponse](
			httpClient,
			baseURL+RoutineServiceAddExerciseProcedure,
			connect.WithSchema(routineServiceAddExerciseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeExercise: connect.NewClient[v1.RemoveExerciseRequest, v1.RemoveExerciseResponse](
			httpClient,
			baseURL+RoutineServiceRemoveExerciseProcedure,
			connect.WithSchema(routineServiceRemoveExerciseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateExerciseOrder: connect.NewClient[v1.UpdateExerciseOrderRequest, v1.UpdateExerciseOrderResponse](
			httpClient,
			baseURL+RoutineServiceUpdateExerciseOrderProcedure,
			connect.WithSchema(routineServiceUpdateExerciseOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// routineServiceClient implements RoutineServiceClient.
type routineServiceClient struct {
	createRoutine       *connect.Client[v1.CreateRoutineRequest, v1.CreateRoutineResponse]
	getRoutine          *connect.Client[v1.GetRoutineRequest, v1.GetRoutineResponse]
	updateRoutine       *connect.Client[v1.UpdateRoutineRequest, v1.UpdateRoutineResponse]
	deleteRoutine       *connect.Client[v1.DeleteRoutineRequest, v1.DeleteRoutineResponse]
	listRoutines        *connect.Client[v1.ListRoutinesRequest, v1.ListRoutinesResponse]
	addExercise         *connect.Client[v1.AddExerciseRequest, v1.AddExerciseResponse]
	removeExercise      *connect.Client[v1.RemoveExerciseRequest, v1.RemoveExerciseResponse]
	updateExerciseOrder *connect.Client[v1.UpdateExerciseOrderRequest, v1.UpdateExerciseOrderResponse]
}

// CreateRoutine calls api.v1.RoutineService.CreateRoutine.
func (c *routineServiceClient) CreateRoutine(ctx context.Context, req *connect.Request[v1.CreateRoutineRequest]) (*connect.Response[v1.CreateRoutineResponse], error) {
	return c.createRoutine.CallUnary(ctx, req)
}

// GetRoutine calls api.v1.RoutineService.GetRoutine.
func (c *routineServiceClient) GetRoutine(ctx context.Context, req *connect.Request[v1.GetRoutineRequest]) (*connect.Response[v1.GetRoutineResponse], error) {
	return c.getRoutine.CallUnary(ctx, req)
}

// UpdateRoutine calls api.v1.RoutineService.UpdateRoutine.
func (c *routineServiceClient) UpdateRoutine(ctx context.Context, req *connect.Request[v1.UpdateRoutineRequest]) (*connect.Response[v1.UpdateRoutineResponse], error) {
	return c.updateRoutine.CallUnary(ctx, req)
}

// DeleteRoutine calls api.v1.RoutineService.DeleteRoutine.
func (c *routineServiceClient) DeleteRoutine(ctx context.Context, req *connect.Request[v1.DeleteRoutineRequest]) (*connect.Response[v1.DeleteRoutineResponse], error) {
	return c.deleteRoutine.CallUnary(ctx, req)
}

// ListRoutines calls api.v1.RoutineService.ListRoutines.
func (c *routineServiceClient) ListRoutines(ctx context.Context, req *connect.Request[v1.ListRoutinesRequest]) (*connect.Response[v1.ListRoutinesResponse], error) {
	return c.listRoutines.CallUnary(ctx, req)
}

// AddExercise calls api.v1.RoutineService.AddExercise.
func (c *routineServiceClient) AddExercise(ctx context.Context, req *connect.Request[v1.AddExerciseRequest]) (*connect.Response[v1.AddExerciseResponse], error) {
	return c.addExercise.CallUnary(ctx, req)
}

// RemoveExercise calls api.v1.RoutineService.RemoveExercise.
func (c *routineServiceClient) RemoveExercise(ctx context.Context, req *connect.Request[v1.RemoveExerciseRequest]) (*connect.Response[v1.RemoveExerciseResponse], error) {
	return c.removeExercise.CallUnary(ctx, req)
}

// UpdateExerciseOrder calls api.v1.RoutineService.UpdateExerciseOrder.
func (c *routineServiceClient) UpdateExerciseOrder(ctx context.Context, req *connect.Request[v1.UpdateExerciseOrderRequest]) (*connect.Response[v1.UpdateExerciseOrderResponse], error) {
	return c.updateExerciseOrder.CallUnary(ctx, req)
}

// RoutineServiceHandler is an implementation of the api.v1.RoutineService service.
type RoutineServiceHandler interface {
	CreateRoutine(context.Context, *connect.Request[v1.CreateRoutineRequest]) (*connect.Response[v1.CreateRoutineResponse], error)
	GetRoutine(context.Context, *connect.Request[v1.GetRoutineRequest]) (*connect.Response[v1.GetRoutineResponse], error)
	UpdateRoutine(context.Context, *connect.Request[v1.UpdateRoutineRequest]) (*connect.Response[v1.UpdateRoutineResponse], error)
	DeleteRoutine(context.Context, *connect.Request[v1.DeleteRoutineRequest]) (*connect.Response[v1.DeleteRoutineResponse], error)
	ListRoutines(context.Context, *connect.Request[v1.ListRoutinesRequest]) (*connect.Response[v1.ListRoutinesResponse], error)
	AddExercise(context.Context, *connect.Request[v1.AddExerciseRequest]) (*connect.Response[v1.AddExerciseResponse], error)
	RemoveExercise(context.Context, *connect.Request[v1.RemoveExerciseRequest]) (*connect.Response[v1.RemoveExerciseResponse], error)
	UpdateExerciseOrder(context.Context, *connect.Request[v1.UpdateExerciseOrderRequest]) (*connect.Response[v1.UpdateExerciseOrderResponse], error)
}

// NewRoutineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoutineServiceHandler(svc RoutineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routineServiceCreateRoutineHandler := connect.NewUnaryHandler(
		RoutineServiceCreateRoutineProcedure,
		svc.CreateRoutine,
		connect.WithSchema(routineServiceCreateRoutineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routineServiceGetRoutineHandler := connect.NewUnaryHandler(
		RoutineServiceGetRoutineProcedure,
		svc.GetRoutine,
		connect.WithSchema(routineServiceGetRoutineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routineServiceUpdateRoutineHandler := connect.NewUnaryHandler(
		RoutineServiceUpdateRoutineProcedure,
		svc.UpdateRoutine,
		connect.WithSchema(routineServiceUpdateRoutineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routineServiceDeleteRoutineHandler := connect.NewUnaryHandler(
		RoutineServiceDeleteRoutineProcedure,
		svc.DeleteRoutine,
		connect.WithSchema(routineServiceDeleteRoutineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routineServiceListRoutinesHandler := connect.NewUnaryHandler(
		RoutineServiceListRoutinesProcedure,
		svc.ListRoutines,
		connect.WithSchema(routineServiceListRoutinesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routineServiceAddExerciseHandler := connect.NewUnaryHandler(
		RoutineServiceAddExerciseProcedure,
		svc.AddExercise,
		connect.WithSchema(routineServiceAddExerciseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routineServiceRemoveExerciseHandler := connect.NewUnaryHandler(
		RoutineServiceRemoveExerciseProcedure,
		svc.RemoveExercise,
		connect.WithSchema(routineServiceRemoveExerciseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routineServiceUpdateExerciseOrderHandler := connect.NewUnaryHandler(
		RoutineServiceUpdateExerciseOrderProcedure,
		svc.UpdateExerciseOrder,
		connect.WithSchema(routineServiceUpdateExerciseOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.RoutineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoutineServiceCreateRoutineProcedure:
			routineServiceCreateRoutineHandler.ServeHTTP(w, r)
		case RoutineServiceGetRoutineProcedure:
			routineServiceGetRoutineHandler.ServeHTTP(w, r)
		case RoutineServiceUpdateRoutineProcedure:
			routineServiceUpdateRoutineHandler.ServeHTTP(w, r)
		case RoutineServiceDeleteRoutineProcedure:
			routineServiceDeleteRoutineHandler.ServeHTTP(w, r)
		case RoutineServiceListRoutinesProcedure:
			routineServiceListRoutinesHandler.ServeHTTP(w, r)
		case RoutineServiceAddExerciseProcedure:
			routineServiceAddExerciseHandler.ServeHTTP(w, r)
		case RoutineServiceRemoveExerciseProcedure:
			routineServiceRemoveExerciseHandler.ServeHTTP(w, r)
		case RoutineServiceUpdateExerciseOrderProcedure:
			routineServiceUpdateExerciseOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoutineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoutineServiceHandler struct{}

func (UnimplementedRoutineServiceHandler) CreateRoutine(context.Context, *connect.Request[v1.CreateRoutineRequest]) (*connect.Response[v1.CreateRoutineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.CreateRoutine is not implemented"))
}

func (UnimplementedRoutineServiceHandler) GetRoutine(context.Context, *connect.Request[v1.GetRoutineRequest]) (*connect.Response[v1.GetRoutineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.GetRoutine is not implemented"))
}

func (UnimplementedRoutineServiceHandler) UpdateRoutine(context.Context, *connect.Request[v1.UpdateRoutineRequest]) (*connect.Response[v1.UpdateRoutineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.UpdateRoutine is not implemented"))
}

func (UnimplementedRoutineServiceHandler) DeleteRoutine(context.Context, *connect.Request[v1.DeleteRoutineRequest]) (*connect.Response[v1.DeleteRoutineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.DeleteRoutine is not implemented"))
}

func (UnimplementedRoutineServiceHandler) ListRoutines(context.Context, *connect.Request[v1.ListRoutinesRequest]) (*connect.Response[v1.ListRoutinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.ListRoutines is not implemented"))
}

func (UnimplementedRoutineServiceHandler) AddExercise(context.Context, *connect.Request[v1.AddExerciseRequest]) (*connect.Response[v1.AddExerciseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.AddExercise is not implemented"))
}

func (UnimplementedRoutineServiceHandler) RemoveExercise(context.Context, *connect.Request[v1.RemoveExerciseRequest]) (*connect.Response[v1.RemoveExerciseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.RemoveExercise is not implemented"))
}

func (UnimplementedRoutineServiceHandler) UpdateExerciseOrder(context.Context, *connect.Request[v1.UpdateExerciseOrderRequest]) (*connect.Response[v1.UpdateExerciseOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RoutineService.UpdateExerciseOrder is not implemented"))
}
