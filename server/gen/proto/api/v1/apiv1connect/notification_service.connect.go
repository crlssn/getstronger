// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/notification_service.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/crlssn/getstronger/server/gen/proto/api/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "api.v1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceListNotificationsProcedure is the fully-qualified name of the
	// NotificationService's ListNotifications RPC.
	NotificationServiceListNotificationsProcedure = "/api.v1.NotificationService/ListNotifications"
	// NotificationServiceMarkNotificationsAsReadProcedure is the fully-qualified name of the
	// NotificationService's MarkNotificationsAsRead RPC.
	NotificationServiceMarkNotificationsAsReadProcedure = "/api.v1.NotificationService/MarkNotificationsAsRead"
	// NotificationServiceUnreadNotificationsProcedure is the fully-qualified name of the
	// NotificationService's UnreadNotifications RPC.
	NotificationServiceUnreadNotificationsProcedure = "/api.v1.NotificationService/UnreadNotifications"
)

// NotificationServiceClient is a client for the api.v1.NotificationService service.
type NotificationServiceClient interface {
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	MarkNotificationsAsRead(context.Context, *connect.Request[v1.MarkNotificationsAsReadRequest]) (*connect.Response[v1.MarkNotificationsAsReadResponse], error)
	UnreadNotifications(context.Context, *connect.Request[v1.UnreadNotificationsRequest]) (*connect.ServerStreamForClient[v1.UnreadNotificationsResponse], error)
}

// NewNotificationServiceClient constructs a client for the api.v1.NotificationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notificationServiceMethods := v1.File_api_v1_notification_service_proto.Services().ByName("NotificationService").Methods()
	return &notificationServiceClient{
		listNotifications: connect.NewClient[v1.ListNotificationsRequest, v1.ListNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceListNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListNotifications")),
			connect.WithClientOptions(opts...),
		),
		markNotificationsAsRead: connect.NewClient[v1.MarkNotificationsAsReadRequest, v1.MarkNotificationsAsReadResponse](
			httpClient,
			baseURL+NotificationServiceMarkNotificationsAsReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("MarkNotificationsAsRead")),
			connect.WithClientOptions(opts...),
		),
		unreadNotifications: connect.NewClient[v1.UnreadNotificationsRequest, v1.UnreadNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceUnreadNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("UnreadNotifications")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	listNotifications       *connect.Client[v1.ListNotificationsRequest, v1.ListNotificationsResponse]
	markNotificationsAsRead *connect.Client[v1.MarkNotificationsAsReadRequest, v1.MarkNotificationsAsReadResponse]
	unreadNotifications     *connect.Client[v1.UnreadNotificationsRequest, v1.UnreadNotificationsResponse]
}

// ListNotifications calls api.v1.NotificationService.ListNotifications.
func (c *notificationServiceClient) ListNotifications(ctx context.Context, req *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return c.listNotifications.CallUnary(ctx, req)
}

// MarkNotificationsAsRead calls api.v1.NotificationService.MarkNotificationsAsRead.
func (c *notificationServiceClient) MarkNotificationsAsRead(ctx context.Context, req *connect.Request[v1.MarkNotificationsAsReadRequest]) (*connect.Response[v1.MarkNotificationsAsReadResponse], error) {
	return c.markNotificationsAsRead.CallUnary(ctx, req)
}

// UnreadNotifications calls api.v1.NotificationService.UnreadNotifications.
func (c *notificationServiceClient) UnreadNotifications(ctx context.Context, req *connect.Request[v1.UnreadNotificationsRequest]) (*connect.ServerStreamForClient[v1.UnreadNotificationsResponse], error) {
	return c.unreadNotifications.CallServerStream(ctx, req)
}

// NotificationServiceHandler is an implementation of the api.v1.NotificationService service.
type NotificationServiceHandler interface {
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	MarkNotificationsAsRead(context.Context, *connect.Request[v1.MarkNotificationsAsReadRequest]) (*connect.Response[v1.MarkNotificationsAsReadResponse], error)
	UnreadNotifications(context.Context, *connect.Request[v1.UnreadNotificationsRequest], *connect.ServerStream[v1.UnreadNotificationsResponse]) error
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceMethods := v1.File_api_v1_notification_service_proto.Services().ByName("NotificationService").Methods()
	notificationServiceListNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceListNotificationsProcedure,
		svc.ListNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("ListNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceMarkNotificationsAsReadHandler := connect.NewUnaryHandler(
		NotificationServiceMarkNotificationsAsReadProcedure,
		svc.MarkNotificationsAsRead,
		connect.WithSchema(notificationServiceMethods.ByName("MarkNotificationsAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUnreadNotificationsHandler := connect.NewServerStreamHandler(
		NotificationServiceUnreadNotificationsProcedure,
		svc.UnreadNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("UnreadNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceListNotificationsProcedure:
			notificationServiceListNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceMarkNotificationsAsReadProcedure:
			notificationServiceMarkNotificationsAsReadHandler.ServeHTTP(w, r)
		case NotificationServiceUnreadNotificationsProcedure:
			notificationServiceUnreadNotificationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.NotificationService.ListNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) MarkNotificationsAsRead(context.Context, *connect.Request[v1.MarkNotificationsAsReadRequest]) (*connect.Response[v1.MarkNotificationsAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.NotificationService.MarkNotificationsAsRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UnreadNotifications(context.Context, *connect.Request[v1.UnreadNotificationsRequest], *connect.ServerStream[v1.UnreadNotificationsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.NotificationService.UnreadNotifications is not implemented"))
}
