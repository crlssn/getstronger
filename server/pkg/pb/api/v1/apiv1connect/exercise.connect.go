// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/exercise.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/crlssn/getstronger/server/pkg/pb/api/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExerciseServiceName is the fully-qualified name of the ExerciseService service.
	ExerciseServiceName = "api.v1.ExerciseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExerciseServiceCreateProcedure is the fully-qualified name of the ExerciseService's Create RPC.
	ExerciseServiceCreateProcedure = "/api.v1.ExerciseService/Create"
	// ExerciseServiceGetProcedure is the fully-qualified name of the ExerciseService's Get RPC.
	ExerciseServiceGetProcedure = "/api.v1.ExerciseService/Get"
	// ExerciseServiceUpdateProcedure is the fully-qualified name of the ExerciseService's Update RPC.
	ExerciseServiceUpdateProcedure = "/api.v1.ExerciseService/Update"
	// ExerciseServiceDeleteProcedure is the fully-qualified name of the ExerciseService's Delete RPC.
	ExerciseServiceDeleteProcedure = "/api.v1.ExerciseService/Delete"
	// ExerciseServiceListProcedure is the fully-qualified name of the ExerciseService's List RPC.
	ExerciseServiceListProcedure = "/api.v1.ExerciseService/List"
	// ExerciseServiceGetPreviousWorkoutSetsProcedure is the fully-qualified name of the
	// ExerciseService's GetPreviousWorkoutSets RPC.
	ExerciseServiceGetPreviousWorkoutSetsProcedure = "/api.v1.ExerciseService/GetPreviousWorkoutSets"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	exerciseServiceServiceDescriptor                      = v1.File_api_v1_exercise_proto.Services().ByName("ExerciseService")
	exerciseServiceCreateMethodDescriptor                 = exerciseServiceServiceDescriptor.Methods().ByName("Create")
	exerciseServiceGetMethodDescriptor                    = exerciseServiceServiceDescriptor.Methods().ByName("Get")
	exerciseServiceUpdateMethodDescriptor                 = exerciseServiceServiceDescriptor.Methods().ByName("Update")
	exerciseServiceDeleteMethodDescriptor                 = exerciseServiceServiceDescriptor.Methods().ByName("Delete")
	exerciseServiceListMethodDescriptor                   = exerciseServiceServiceDescriptor.Methods().ByName("List")
	exerciseServiceGetPreviousWorkoutSetsMethodDescriptor = exerciseServiceServiceDescriptor.Methods().ByName("GetPreviousWorkoutSets")
)

// ExerciseServiceClient is a client for the api.v1.ExerciseService service.
type ExerciseServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateExerciseRequest]) (*connect.Response[v1.CreateExerciseResponse], error)
	Get(context.Context, *connect.Request[v1.GetExerciseRequest]) (*connect.Response[v1.GetExerciseResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateExerciseRequest]) (*connect.Response[v1.UpdateExerciseResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteExerciseRequest]) (*connect.Response[v1.DeleteExerciseResponse], error)
	List(context.Context, *connect.Request[v1.ListExercisesRequest]) (*connect.Response[v1.ListExercisesResponse], error)
	GetPreviousWorkoutSets(context.Context, *connect.Request[v1.GetPreviousWorkoutSetsRequest]) (*connect.Response[v1.GetPreviousWorkoutSetsResponse], error)
}

// NewExerciseServiceClient constructs a client for the api.v1.ExerciseService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExerciseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExerciseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exerciseServiceClient{
		create: connect.NewClient[v1.CreateExerciseRequest, v1.CreateExerciseResponse](
			httpClient,
			baseURL+ExerciseServiceCreateProcedure,
			connect.WithSchema(exerciseServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetExerciseRequest, v1.GetExerciseResponse](
			httpClient,
			baseURL+ExerciseServiceGetProcedure,
			connect.WithSchema(exerciseServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateExerciseRequest, v1.UpdateExerciseResponse](
			httpClient,
			baseURL+ExerciseServiceUpdateProcedure,
			connect.WithSchema(exerciseServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteExerciseRequest, v1.DeleteExerciseResponse](
			httpClient,
			baseURL+ExerciseServiceDeleteProcedure,
			connect.WithSchema(exerciseServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListExercisesRequest, v1.ListExercisesResponse](
			httpClient,
			baseURL+ExerciseServiceListProcedure,
			connect.WithSchema(exerciseServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPreviousWorkoutSets: connect.NewClient[v1.GetPreviousWorkoutSetsRequest, v1.GetPreviousWorkoutSetsResponse](
			httpClient,
			baseURL+ExerciseServiceGetPreviousWorkoutSetsProcedure,
			connect.WithSchema(exerciseServiceGetPreviousWorkoutSetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// exerciseServiceClient implements ExerciseServiceClient.
type exerciseServiceClient struct {
	create                 *connect.Client[v1.CreateExerciseRequest, v1.CreateExerciseResponse]
	get                    *connect.Client[v1.GetExerciseRequest, v1.GetExerciseResponse]
	update                 *connect.Client[v1.UpdateExerciseRequest, v1.UpdateExerciseResponse]
	delete                 *connect.Client[v1.DeleteExerciseRequest, v1.DeleteExerciseResponse]
	list                   *connect.Client[v1.ListExercisesRequest, v1.ListExercisesResponse]
	getPreviousWorkoutSets *connect.Client[v1.GetPreviousWorkoutSetsRequest, v1.GetPreviousWorkoutSetsResponse]
}

// Create calls api.v1.ExerciseService.Create.
func (c *exerciseServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateExerciseRequest]) (*connect.Response[v1.CreateExerciseResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls api.v1.ExerciseService.Get.
func (c *exerciseServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetExerciseRequest]) (*connect.Response[v1.GetExerciseResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls api.v1.ExerciseService.Update.
func (c *exerciseServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateExerciseRequest]) (*connect.Response[v1.UpdateExerciseResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.ExerciseService.Delete.
func (c *exerciseServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteExerciseRequest]) (*connect.Response[v1.DeleteExerciseResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls api.v1.ExerciseService.List.
func (c *exerciseServiceClient) List(ctx context.Context, req *connect.Request[v1.ListExercisesRequest]) (*connect.Response[v1.ListExercisesResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// GetPreviousWorkoutSets calls api.v1.ExerciseService.GetPreviousWorkoutSets.
func (c *exerciseServiceClient) GetPreviousWorkoutSets(ctx context.Context, req *connect.Request[v1.GetPreviousWorkoutSetsRequest]) (*connect.Response[v1.GetPreviousWorkoutSetsResponse], error) {
	return c.getPreviousWorkoutSets.CallUnary(ctx, req)
}

// ExerciseServiceHandler is an implementation of the api.v1.ExerciseService service.
type ExerciseServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateExerciseRequest]) (*connect.Response[v1.CreateExerciseResponse], error)
	Get(context.Context, *connect.Request[v1.GetExerciseRequest]) (*connect.Response[v1.GetExerciseResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateExerciseRequest]) (*connect.Response[v1.UpdateExerciseResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteExerciseRequest]) (*connect.Response[v1.DeleteExerciseResponse], error)
	List(context.Context, *connect.Request[v1.ListExercisesRequest]) (*connect.Response[v1.ListExercisesResponse], error)
	GetPreviousWorkoutSets(context.Context, *connect.Request[v1.GetPreviousWorkoutSetsRequest]) (*connect.Response[v1.GetPreviousWorkoutSetsResponse], error)
}

// NewExerciseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExerciseServiceHandler(svc ExerciseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	exerciseServiceCreateHandler := connect.NewUnaryHandler(
		ExerciseServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(exerciseServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exerciseServiceGetHandler := connect.NewUnaryHandler(
		ExerciseServiceGetProcedure,
		svc.Get,
		connect.WithSchema(exerciseServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exerciseServiceUpdateHandler := connect.NewUnaryHandler(
		ExerciseServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(exerciseServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exerciseServiceDeleteHandler := connect.NewUnaryHandler(
		ExerciseServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(exerciseServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exerciseServiceListHandler := connect.NewUnaryHandler(
		ExerciseServiceListProcedure,
		svc.List,
		connect.WithSchema(exerciseServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exerciseServiceGetPreviousWorkoutSetsHandler := connect.NewUnaryHandler(
		ExerciseServiceGetPreviousWorkoutSetsProcedure,
		svc.GetPreviousWorkoutSets,
		connect.WithSchema(exerciseServiceGetPreviousWorkoutSetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.ExerciseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExerciseServiceCreateProcedure:
			exerciseServiceCreateHandler.ServeHTTP(w, r)
		case ExerciseServiceGetProcedure:
			exerciseServiceGetHandler.ServeHTTP(w, r)
		case ExerciseServiceUpdateProcedure:
			exerciseServiceUpdateHandler.ServeHTTP(w, r)
		case ExerciseServiceDeleteProcedure:
			exerciseServiceDeleteHandler.ServeHTTP(w, r)
		case ExerciseServiceListProcedure:
			exerciseServiceListHandler.ServeHTTP(w, r)
		case ExerciseServiceGetPreviousWorkoutSetsProcedure:
			exerciseServiceGetPreviousWorkoutSetsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExerciseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExerciseServiceHandler struct{}

func (UnimplementedExerciseServiceHandler) Create(context.Context, *connect.Request[v1.CreateExerciseRequest]) (*connect.Response[v1.CreateExerciseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ExerciseService.Create is not implemented"))
}

func (UnimplementedExerciseServiceHandler) Get(context.Context, *connect.Request[v1.GetExerciseRequest]) (*connect.Response[v1.GetExerciseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ExerciseService.Get is not implemented"))
}

func (UnimplementedExerciseServiceHandler) Update(context.Context, *connect.Request[v1.UpdateExerciseRequest]) (*connect.Response[v1.UpdateExerciseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ExerciseService.Update is not implemented"))
}

func (UnimplementedExerciseServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteExerciseRequest]) (*connect.Response[v1.DeleteExerciseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ExerciseService.Delete is not implemented"))
}

func (UnimplementedExerciseServiceHandler) List(context.Context, *connect.Request[v1.ListExercisesRequest]) (*connect.Response[v1.ListExercisesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ExerciseService.List is not implemented"))
}

func (UnimplementedExerciseServiceHandler) GetPreviousWorkoutSets(context.Context, *connect.Request[v1.GetPreviousWorkoutSetsRequest]) (*connect.Response[v1.GetPreviousWorkoutSetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ExerciseService.GetPreviousWorkoutSets is not implemented"))
}
