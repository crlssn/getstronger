// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/users.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/crlssn/getstronger/server/pkg/pb/api/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetProcedure is the fully-qualified name of the UserService's Get RPC.
	UserServiceGetProcedure = "/api.v1.UserService/Get"
	// UserServiceFollowProcedure is the fully-qualified name of the UserService's Follow RPC.
	UserServiceFollowProcedure = "/api.v1.UserService/Follow"
	// UserServiceUnfollowProcedure is the fully-qualified name of the UserService's Unfollow RPC.
	UserServiceUnfollowProcedure = "/api.v1.UserService/Unfollow"
	// UserServiceListFollowersProcedure is the fully-qualified name of the UserService's ListFollowers
	// RPC.
	UserServiceListFollowersProcedure = "/api.v1.UserService/ListFollowers"
	// UserServiceListFolloweesProcedure is the fully-qualified name of the UserService's ListFollowees
	// RPC.
	UserServiceListFolloweesProcedure = "/api.v1.UserService/ListFollowees"
	// UserServiceSearchProcedure is the fully-qualified name of the UserService's Search RPC.
	UserServiceSearchProcedure = "/api.v1.UserService/Search"
	// UserServiceListNotificationsProcedure is the fully-qualified name of the UserService's
	// ListNotifications RPC.
	UserServiceListNotificationsProcedure = "/api.v1.UserService/ListNotifications"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor                 = v1.File_api_v1_users_proto.Services().ByName("UserService")
	userServiceGetMethodDescriptor               = userServiceServiceDescriptor.Methods().ByName("Get")
	userServiceFollowMethodDescriptor            = userServiceServiceDescriptor.Methods().ByName("Follow")
	userServiceUnfollowMethodDescriptor          = userServiceServiceDescriptor.Methods().ByName("Unfollow")
	userServiceListFollowersMethodDescriptor     = userServiceServiceDescriptor.Methods().ByName("ListFollowers")
	userServiceListFolloweesMethodDescriptor     = userServiceServiceDescriptor.Methods().ByName("ListFollowees")
	userServiceSearchMethodDescriptor            = userServiceServiceDescriptor.Methods().ByName("Search")
	userServiceListNotificationsMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("ListNotifications")
)

// UserServiceClient is a client for the api.v1.UserService service.
type UserServiceClient interface {
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	Follow(context.Context, *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error)
	Unfollow(context.Context, *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error)
	ListFollowers(context.Context, *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error)
	ListFollowees(context.Context, *connect.Request[v1.ListFolloweesRequest]) (*connect.Response[v1.ListFolloweesResponse], error)
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
}

// NewUserServiceClient constructs a client for the api.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		get: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetProcedure,
			connect.WithSchema(userServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		follow: connect.NewClient[v1.FollowRequest, v1.FollowResponse](
			httpClient,
			baseURL+UserServiceFollowProcedure,
			connect.WithSchema(userServiceFollowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unfollow: connect.NewClient[v1.UnfollowRequest, v1.UnfollowResponse](
			httpClient,
			baseURL+UserServiceUnfollowProcedure,
			connect.WithSchema(userServiceUnfollowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFollowers: connect.NewClient[v1.ListFollowersRequest, v1.ListFollowersResponse](
			httpClient,
			baseURL+UserServiceListFollowersProcedure,
			connect.WithSchema(userServiceListFollowersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFollowees: connect.NewClient[v1.ListFolloweesRequest, v1.ListFolloweesResponse](
			httpClient,
			baseURL+UserServiceListFolloweesProcedure,
			connect.WithSchema(userServiceListFolloweesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+UserServiceSearchProcedure,
			connect.WithSchema(userServiceSearchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNotifications: connect.NewClient[v1.ListNotificationsRequest, v1.ListNotificationsResponse](
			httpClient,
			baseURL+UserServiceListNotificationsProcedure,
			connect.WithSchema(userServiceListNotificationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	get               *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	follow            *connect.Client[v1.FollowRequest, v1.FollowResponse]
	unfollow          *connect.Client[v1.UnfollowRequest, v1.UnfollowResponse]
	listFollowers     *connect.Client[v1.ListFollowersRequest, v1.ListFollowersResponse]
	listFollowees     *connect.Client[v1.ListFolloweesRequest, v1.ListFolloweesResponse]
	search            *connect.Client[v1.SearchRequest, v1.SearchResponse]
	listNotifications *connect.Client[v1.ListNotificationsRequest, v1.ListNotificationsResponse]
}

// Get calls api.v1.UserService.Get.
func (c *userServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Follow calls api.v1.UserService.Follow.
func (c *userServiceClient) Follow(ctx context.Context, req *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error) {
	return c.follow.CallUnary(ctx, req)
}

// Unfollow calls api.v1.UserService.Unfollow.
func (c *userServiceClient) Unfollow(ctx context.Context, req *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error) {
	return c.unfollow.CallUnary(ctx, req)
}

// ListFollowers calls api.v1.UserService.ListFollowers.
func (c *userServiceClient) ListFollowers(ctx context.Context, req *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error) {
	return c.listFollowers.CallUnary(ctx, req)
}

// ListFollowees calls api.v1.UserService.ListFollowees.
func (c *userServiceClient) ListFollowees(ctx context.Context, req *connect.Request[v1.ListFolloweesRequest]) (*connect.Response[v1.ListFolloweesResponse], error) {
	return c.listFollowees.CallUnary(ctx, req)
}

// Search calls api.v1.UserService.Search.
func (c *userServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// ListNotifications calls api.v1.UserService.ListNotifications.
func (c *userServiceClient) ListNotifications(ctx context.Context, req *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return c.listNotifications.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.v1.UserService service.
type UserServiceHandler interface {
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	Follow(context.Context, *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error)
	Unfollow(context.Context, *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error)
	ListFollowers(context.Context, *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error)
	ListFollowees(context.Context, *connect.Request[v1.ListFolloweesRequest]) (*connect.Response[v1.ListFolloweesResponse], error)
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceGetHandler := connect.NewUnaryHandler(
		UserServiceGetProcedure,
		svc.Get,
		connect.WithSchema(userServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceFollowHandler := connect.NewUnaryHandler(
		UserServiceFollowProcedure,
		svc.Follow,
		connect.WithSchema(userServiceFollowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnfollowHandler := connect.NewUnaryHandler(
		UserServiceUnfollowProcedure,
		svc.Unfollow,
		connect.WithSchema(userServiceUnfollowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListFollowersHandler := connect.NewUnaryHandler(
		UserServiceListFollowersProcedure,
		svc.ListFollowers,
		connect.WithSchema(userServiceListFollowersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListFolloweesHandler := connect.NewUnaryHandler(
		UserServiceListFolloweesProcedure,
		svc.ListFollowees,
		connect.WithSchema(userServiceListFolloweesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchHandler := connect.NewUnaryHandler(
		UserServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(userServiceSearchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListNotificationsHandler := connect.NewUnaryHandler(
		UserServiceListNotificationsProcedure,
		svc.ListNotifications,
		connect.WithSchema(userServiceListNotificationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetProcedure:
			userServiceGetHandler.ServeHTTP(w, r)
		case UserServiceFollowProcedure:
			userServiceFollowHandler.ServeHTTP(w, r)
		case UserServiceUnfollowProcedure:
			userServiceUnfollowHandler.ServeHTTP(w, r)
		case UserServiceListFollowersProcedure:
			userServiceListFollowersHandler.ServeHTTP(w, r)
		case UserServiceListFolloweesProcedure:
			userServiceListFolloweesHandler.ServeHTTP(w, r)
		case UserServiceSearchProcedure:
			userServiceSearchHandler.ServeHTTP(w, r)
		case UserServiceListNotificationsProcedure:
			userServiceListNotificationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.Get is not implemented"))
}

func (UnimplementedUserServiceHandler) Follow(context.Context, *connect.Request[v1.FollowRequest]) (*connect.Response[v1.FollowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.Follow is not implemented"))
}

func (UnimplementedUserServiceHandler) Unfollow(context.Context, *connect.Request[v1.UnfollowRequest]) (*connect.Response[v1.UnfollowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.Unfollow is not implemented"))
}

func (UnimplementedUserServiceHandler) ListFollowers(context.Context, *connect.Request[v1.ListFollowersRequest]) (*connect.Response[v1.ListFollowersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.ListFollowers is not implemented"))
}

func (UnimplementedUserServiceHandler) ListFollowees(context.Context, *connect.Request[v1.ListFolloweesRequest]) (*connect.Response[v1.ListFolloweesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.ListFollowees is not implemented"))
}

func (UnimplementedUserServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.Search is not implemented"))
}

func (UnimplementedUserServiceHandler) ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.ListNotifications is not implemented"))
}
