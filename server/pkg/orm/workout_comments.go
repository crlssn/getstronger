// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WorkoutComment is an object representing the database table.
type WorkoutComment struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	WorkoutID string    `boil:"workout_id" json:"workout_id" toml:"workout_id" yaml:"workout_id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Comment   string    `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *workoutCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workoutCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkoutCommentColumns = struct {
	ID        string
	WorkoutID string
	UserID    string
	Comment   string
	CreatedAt string
}{
	ID:        "id",
	WorkoutID: "workout_id",
	UserID:    "user_id",
	Comment:   "comment",
	CreatedAt: "created_at",
}

var WorkoutCommentTableColumns = struct {
	ID        string
	WorkoutID string
	UserID    string
	Comment   string
	CreatedAt string
}{
	ID:        "workout_comments.id",
	WorkoutID: "workout_comments.workout_id",
	UserID:    "workout_comments.user_id",
	Comment:   "workout_comments.comment",
	CreatedAt: "workout_comments.created_at",
}

// Generated where

var WorkoutCommentWhere = struct {
	ID        whereHelperstring
	WorkoutID whereHelperstring
	UserID    whereHelperstring
	Comment   whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"getstronger\".\"workout_comments\".\"id\""},
	WorkoutID: whereHelperstring{field: "\"getstronger\".\"workout_comments\".\"workout_id\""},
	UserID:    whereHelperstring{field: "\"getstronger\".\"workout_comments\".\"user_id\""},
	Comment:   whereHelperstring{field: "\"getstronger\".\"workout_comments\".\"comment\""},
	CreatedAt: whereHelpertime_Time{field: "\"getstronger\".\"workout_comments\".\"created_at\""},
}

// WorkoutCommentRels is where relationship names are stored.
var WorkoutCommentRels = struct {
	User    string
	Workout string
}{
	User:    "User",
	Workout: "Workout",
}

// workoutCommentR is where relationships are stored.
type workoutCommentR struct {
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
	Workout *Workout `boil:"Workout" json:"Workout" toml:"Workout" yaml:"Workout"`
}

// NewStruct creates a new relationship struct
func (*workoutCommentR) NewStruct() *workoutCommentR {
	return &workoutCommentR{}
}

func (r *workoutCommentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *workoutCommentR) GetWorkout() *Workout {
	if r == nil {
		return nil
	}
	return r.Workout
}

// workoutCommentL is where Load methods for each relationship are stored.
type workoutCommentL struct{}

var (
	workoutCommentAllColumns            = []string{"id", "workout_id", "user_id", "comment", "created_at"}
	workoutCommentColumnsWithoutDefault = []string{"workout_id", "user_id", "comment"}
	workoutCommentColumnsWithDefault    = []string{"id", "created_at"}
	workoutCommentPrimaryKeyColumns     = []string{"id"}
	workoutCommentGeneratedColumns      = []string{}
)

type (
	// WorkoutCommentSlice is an alias for a slice of pointers to WorkoutComment.
	// This should almost always be used instead of []WorkoutComment.
	WorkoutCommentSlice []*WorkoutComment
	// WorkoutCommentHook is the signature for custom WorkoutComment hook methods
	WorkoutCommentHook func(context.Context, boil.ContextExecutor, *WorkoutComment) error

	workoutCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workoutCommentType                 = reflect.TypeOf(&WorkoutComment{})
	workoutCommentMapping              = queries.MakeStructMapping(workoutCommentType)
	workoutCommentPrimaryKeyMapping, _ = queries.BindMapping(workoutCommentType, workoutCommentMapping, workoutCommentPrimaryKeyColumns)
	workoutCommentInsertCacheMut       sync.RWMutex
	workoutCommentInsertCache          = make(map[string]insertCache)
	workoutCommentUpdateCacheMut       sync.RWMutex
	workoutCommentUpdateCache          = make(map[string]updateCache)
	workoutCommentUpsertCacheMut       sync.RWMutex
	workoutCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workoutCommentAfterSelectMu sync.Mutex
var workoutCommentAfterSelectHooks []WorkoutCommentHook

var workoutCommentBeforeInsertMu sync.Mutex
var workoutCommentBeforeInsertHooks []WorkoutCommentHook
var workoutCommentAfterInsertMu sync.Mutex
var workoutCommentAfterInsertHooks []WorkoutCommentHook

var workoutCommentBeforeUpdateMu sync.Mutex
var workoutCommentBeforeUpdateHooks []WorkoutCommentHook
var workoutCommentAfterUpdateMu sync.Mutex
var workoutCommentAfterUpdateHooks []WorkoutCommentHook

var workoutCommentBeforeDeleteMu sync.Mutex
var workoutCommentBeforeDeleteHooks []WorkoutCommentHook
var workoutCommentAfterDeleteMu sync.Mutex
var workoutCommentAfterDeleteHooks []WorkoutCommentHook

var workoutCommentBeforeUpsertMu sync.Mutex
var workoutCommentBeforeUpsertHooks []WorkoutCommentHook
var workoutCommentAfterUpsertMu sync.Mutex
var workoutCommentAfterUpsertHooks []WorkoutCommentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WorkoutComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WorkoutComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WorkoutComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WorkoutComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WorkoutComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WorkoutComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WorkoutComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WorkoutComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WorkoutComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workoutCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkoutCommentHook registers your hook function for all future operations.
func AddWorkoutCommentHook(hookPoint boil.HookPoint, workoutCommentHook WorkoutCommentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		workoutCommentAfterSelectMu.Lock()
		workoutCommentAfterSelectHooks = append(workoutCommentAfterSelectHooks, workoutCommentHook)
		workoutCommentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		workoutCommentBeforeInsertMu.Lock()
		workoutCommentBeforeInsertHooks = append(workoutCommentBeforeInsertHooks, workoutCommentHook)
		workoutCommentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		workoutCommentAfterInsertMu.Lock()
		workoutCommentAfterInsertHooks = append(workoutCommentAfterInsertHooks, workoutCommentHook)
		workoutCommentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		workoutCommentBeforeUpdateMu.Lock()
		workoutCommentBeforeUpdateHooks = append(workoutCommentBeforeUpdateHooks, workoutCommentHook)
		workoutCommentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		workoutCommentAfterUpdateMu.Lock()
		workoutCommentAfterUpdateHooks = append(workoutCommentAfterUpdateHooks, workoutCommentHook)
		workoutCommentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		workoutCommentBeforeDeleteMu.Lock()
		workoutCommentBeforeDeleteHooks = append(workoutCommentBeforeDeleteHooks, workoutCommentHook)
		workoutCommentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		workoutCommentAfterDeleteMu.Lock()
		workoutCommentAfterDeleteHooks = append(workoutCommentAfterDeleteHooks, workoutCommentHook)
		workoutCommentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		workoutCommentBeforeUpsertMu.Lock()
		workoutCommentBeforeUpsertHooks = append(workoutCommentBeforeUpsertHooks, workoutCommentHook)
		workoutCommentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		workoutCommentAfterUpsertMu.Lock()
		workoutCommentAfterUpsertHooks = append(workoutCommentAfterUpsertHooks, workoutCommentHook)
		workoutCommentAfterUpsertMu.Unlock()
	}
}

// One returns a single workoutComment record from the query.
func (q workoutCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WorkoutComment, error) {
	o := &WorkoutComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for workout_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WorkoutComment records from the query.
func (q workoutCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkoutCommentSlice, error) {
	var o []*WorkoutComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to WorkoutComment slice")
	}

	if len(workoutCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WorkoutComment records in the query.
func (q workoutCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count workout_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workoutCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if workout_comments exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *WorkoutComment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Workout pointed to by the foreign key.
func (o *WorkoutComment) Workout(mods ...qm.QueryMod) workoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WorkoutID),
	}

	queryMods = append(queryMods, mods...)

	return Workouts(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workoutCommentL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkoutComment interface{}, mods queries.Applicator) error {
	var slice []*WorkoutComment
	var object *WorkoutComment

	if singular {
		var ok bool
		object, ok = maybeWorkoutComment.(*WorkoutComment)
		if !ok {
			object = new(WorkoutComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWorkoutComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWorkoutComment))
			}
		}
	} else {
		s, ok := maybeWorkoutComment.(*[]*WorkoutComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWorkoutComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWorkoutComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &workoutCommentR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workoutCommentR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.users`),
		qm.WhereIn(`getstronger.users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.WorkoutComments = append(foreign.R.WorkoutComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.WorkoutComments = append(foreign.R.WorkoutComments, local)
				break
			}
		}
	}

	return nil
}

// LoadWorkout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workoutCommentL) LoadWorkout(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkoutComment interface{}, mods queries.Applicator) error {
	var slice []*WorkoutComment
	var object *WorkoutComment

	if singular {
		var ok bool
		object, ok = maybeWorkoutComment.(*WorkoutComment)
		if !ok {
			object = new(WorkoutComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWorkoutComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWorkoutComment))
			}
		}
	} else {
		s, ok := maybeWorkoutComment.(*[]*WorkoutComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWorkoutComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWorkoutComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &workoutCommentR{}
		}
		args[object.WorkoutID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workoutCommentR{}
			}

			args[obj.WorkoutID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.workouts`),
		qm.WhereIn(`getstronger.workouts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Workout")
	}

	var resultSlice []*Workout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Workout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for workouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for workouts")
	}

	if len(workoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Workout = foreign
		if foreign.R == nil {
			foreign.R = &workoutR{}
		}
		foreign.R.WorkoutComments = append(foreign.R.WorkoutComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkoutID == foreign.ID {
				local.R.Workout = foreign
				if foreign.R == nil {
					foreign.R = &workoutR{}
				}
				foreign.R.WorkoutComments = append(foreign.R.WorkoutComments, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the workoutComment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.WorkoutComments.
func (o *WorkoutComment) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"workout_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, workoutCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &workoutCommentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			WorkoutComments: WorkoutCommentSlice{o},
		}
	} else {
		related.R.WorkoutComments = append(related.R.WorkoutComments, o)
	}

	return nil
}

// SetWorkout of the workoutComment to the related item.
// Sets o.R.Workout to related.
// Adds o to related.R.WorkoutComments.
func (o *WorkoutComment) SetWorkout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Workout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"workout_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"workout_id"}),
		strmangle.WhereClause("\"", "\"", 2, workoutCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkoutID = related.ID
	if o.R == nil {
		o.R = &workoutCommentR{
			Workout: related,
		}
	} else {
		o.R.Workout = related
	}

	if related.R == nil {
		related.R = &workoutR{
			WorkoutComments: WorkoutCommentSlice{o},
		}
	} else {
		related.R.WorkoutComments = append(related.R.WorkoutComments, o)
	}

	return nil
}

// WorkoutComments retrieves all the records using an executor.
func WorkoutComments(mods ...qm.QueryMod) workoutCommentQuery {
	mods = append(mods, qm.From("\"getstronger\".\"workout_comments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"getstronger\".\"workout_comments\".*"})
	}

	return workoutCommentQuery{q}
}

// FindWorkoutComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorkoutComment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WorkoutComment, error) {
	workoutCommentObj := &WorkoutComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"getstronger\".\"workout_comments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, workoutCommentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from workout_comments")
	}

	if err = workoutCommentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return workoutCommentObj, err
	}

	return workoutCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WorkoutComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no workout_comments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workoutCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workoutCommentInsertCacheMut.RLock()
	cache, cached := workoutCommentInsertCache[key]
	workoutCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workoutCommentAllColumns,
			workoutCommentColumnsWithDefault,
			workoutCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workoutCommentType, workoutCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workoutCommentType, workoutCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"getstronger\".\"workout_comments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"getstronger\".\"workout_comments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into workout_comments")
	}

	if !cached {
		workoutCommentInsertCacheMut.Lock()
		workoutCommentInsertCache[key] = cache
		workoutCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WorkoutComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WorkoutComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workoutCommentUpdateCacheMut.RLock()
	cache, cached := workoutCommentUpdateCache[key]
	workoutCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workoutCommentAllColumns,
			workoutCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update workout_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"getstronger\".\"workout_comments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, workoutCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workoutCommentType, workoutCommentMapping, append(wl, workoutCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update workout_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for workout_comments")
	}

	if !cached {
		workoutCommentUpdateCacheMut.Lock()
		workoutCommentUpdateCache[key] = cache
		workoutCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workoutCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for workout_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for workout_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkoutCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workoutCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"getstronger\".\"workout_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, workoutCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in workoutComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all workoutComment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WorkoutComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no workout_comments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workoutCommentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workoutCommentUpsertCacheMut.RLock()
	cache, cached := workoutCommentUpsertCache[key]
	workoutCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			workoutCommentAllColumns,
			workoutCommentColumnsWithDefault,
			workoutCommentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			workoutCommentAllColumns,
			workoutCommentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert workout_comments, could not build update column list")
		}

		ret := strmangle.SetComplement(workoutCommentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(workoutCommentPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert workout_comments, could not build conflict column list")
			}

			conflict = make([]string, len(workoutCommentPrimaryKeyColumns))
			copy(conflict, workoutCommentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"getstronger\".\"workout_comments\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(workoutCommentType, workoutCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workoutCommentType, workoutCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert workout_comments")
	}

	if !cached {
		workoutCommentUpsertCacheMut.Lock()
		workoutCommentUpsertCache[key] = cache
		workoutCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WorkoutComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WorkoutComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no WorkoutComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workoutCommentPrimaryKeyMapping)
	sql := "DELETE FROM \"getstronger\".\"workout_comments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from workout_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for workout_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workoutCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no workoutCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from workout_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for workout_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkoutCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workoutCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workoutCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"getstronger\".\"workout_comments\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, workoutCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from workoutComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for workout_comments")
	}

	if len(workoutCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WorkoutComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorkoutComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkoutCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkoutCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workoutCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"getstronger\".\"workout_comments\".* FROM \"getstronger\".\"workout_comments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, workoutCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in WorkoutCommentSlice")
	}

	*o = slice

	return nil
}

// WorkoutCommentExists checks if the WorkoutComment row exists.
func WorkoutCommentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"getstronger\".\"workout_comments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if workout_comments exists")
	}

	return exists, nil
}

// Exists checks if the WorkoutComment row exists.
func (o *WorkoutComment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WorkoutCommentExists(ctx, exec, o.ID)
}
