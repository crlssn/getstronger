// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Set is an object representing the database table.
type Set struct {
	ID         string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	WorkoutID  string        `boil:"workout_id" json:"workout_id" toml:"workout_id" yaml:"workout_id"`
	ExerciseID string        `boil:"exercise_id" json:"exercise_id" toml:"exercise_id" yaml:"exercise_id"`
	Weight     types.Decimal `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Reps       int           `boil:"reps" json:"reps" toml:"reps" yaml:"reps"`
	CreatedAt  time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *setR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L setL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SetColumns = struct {
	ID         string
	WorkoutID  string
	ExerciseID string
	Weight     string
	Reps       string
	CreatedAt  string
}{
	ID:         "id",
	WorkoutID:  "workout_id",
	ExerciseID: "exercise_id",
	Weight:     "weight",
	Reps:       "reps",
	CreatedAt:  "created_at",
}

var SetTableColumns = struct {
	ID         string
	WorkoutID  string
	ExerciseID string
	Weight     string
	Reps       string
	CreatedAt  string
}{
	ID:         "sets.id",
	WorkoutID:  "sets.workout_id",
	ExerciseID: "sets.exercise_id",
	Weight:     "sets.weight",
	Reps:       "sets.reps",
	CreatedAt:  "sets.created_at",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SetWhere = struct {
	ID         whereHelperstring
	WorkoutID  whereHelperstring
	ExerciseID whereHelperstring
	Weight     whereHelpertypes_Decimal
	Reps       whereHelperint
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"getstronger\".\"sets\".\"id\""},
	WorkoutID:  whereHelperstring{field: "\"getstronger\".\"sets\".\"workout_id\""},
	ExerciseID: whereHelperstring{field: "\"getstronger\".\"sets\".\"exercise_id\""},
	Weight:     whereHelpertypes_Decimal{field: "\"getstronger\".\"sets\".\"weight\""},
	Reps:       whereHelperint{field: "\"getstronger\".\"sets\".\"reps\""},
	CreatedAt:  whereHelpertime_Time{field: "\"getstronger\".\"sets\".\"created_at\""},
}

// SetRels is where relationship names are stored.
var SetRels = struct {
	Exercise string
	Workout  string
}{
	Exercise: "Exercise",
	Workout:  "Workout",
}

// setR is where relationships are stored.
type setR struct {
	Exercise *Exercise `boil:"Exercise" json:"Exercise" toml:"Exercise" yaml:"Exercise"`
	Workout  *Workout  `boil:"Workout" json:"Workout" toml:"Workout" yaml:"Workout"`
}

// NewStruct creates a new relationship struct
func (*setR) NewStruct() *setR {
	return &setR{}
}

func (r *setR) GetExercise() *Exercise {
	if r == nil {
		return nil
	}
	return r.Exercise
}

func (r *setR) GetWorkout() *Workout {
	if r == nil {
		return nil
	}
	return r.Workout
}

// setL is where Load methods for each relationship are stored.
type setL struct{}

var (
	setAllColumns            = []string{"id", "workout_id", "exercise_id", "weight", "reps", "created_at"}
	setColumnsWithoutDefault = []string{"workout_id", "exercise_id", "weight", "reps"}
	setColumnsWithDefault    = []string{"id", "created_at"}
	setPrimaryKeyColumns     = []string{"id"}
	setGeneratedColumns      = []string{}
)

type (
	// SetSlice is an alias for a slice of pointers to Set.
	// This should almost always be used instead of []Set.
	SetSlice []*Set
	// SetHook is the signature for custom Set hook methods
	SetHook func(context.Context, boil.ContextExecutor, *Set) error

	setQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	setType                 = reflect.TypeOf(&Set{})
	setMapping              = queries.MakeStructMapping(setType)
	setPrimaryKeyMapping, _ = queries.BindMapping(setType, setMapping, setPrimaryKeyColumns)
	setInsertCacheMut       sync.RWMutex
	setInsertCache          = make(map[string]insertCache)
	setUpdateCacheMut       sync.RWMutex
	setUpdateCache          = make(map[string]updateCache)
	setUpsertCacheMut       sync.RWMutex
	setUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var setAfterSelectMu sync.Mutex
var setAfterSelectHooks []SetHook

var setBeforeInsertMu sync.Mutex
var setBeforeInsertHooks []SetHook
var setAfterInsertMu sync.Mutex
var setAfterInsertHooks []SetHook

var setBeforeUpdateMu sync.Mutex
var setBeforeUpdateHooks []SetHook
var setAfterUpdateMu sync.Mutex
var setAfterUpdateHooks []SetHook

var setBeforeDeleteMu sync.Mutex
var setBeforeDeleteHooks []SetHook
var setAfterDeleteMu sync.Mutex
var setAfterDeleteHooks []SetHook

var setBeforeUpsertMu sync.Mutex
var setBeforeUpsertHooks []SetHook
var setAfterUpsertMu sync.Mutex
var setAfterUpsertHooks []SetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Set) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Set) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Set) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Set) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Set) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Set) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Set) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Set) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Set) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSetHook registers your hook function for all future operations.
func AddSetHook(hookPoint boil.HookPoint, setHook SetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		setAfterSelectMu.Lock()
		setAfterSelectHooks = append(setAfterSelectHooks, setHook)
		setAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		setBeforeInsertMu.Lock()
		setBeforeInsertHooks = append(setBeforeInsertHooks, setHook)
		setBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		setAfterInsertMu.Lock()
		setAfterInsertHooks = append(setAfterInsertHooks, setHook)
		setAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		setBeforeUpdateMu.Lock()
		setBeforeUpdateHooks = append(setBeforeUpdateHooks, setHook)
		setBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		setAfterUpdateMu.Lock()
		setAfterUpdateHooks = append(setAfterUpdateHooks, setHook)
		setAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		setBeforeDeleteMu.Lock()
		setBeforeDeleteHooks = append(setBeforeDeleteHooks, setHook)
		setBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		setAfterDeleteMu.Lock()
		setAfterDeleteHooks = append(setAfterDeleteHooks, setHook)
		setAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		setBeforeUpsertMu.Lock()
		setBeforeUpsertHooks = append(setBeforeUpsertHooks, setHook)
		setBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		setAfterUpsertMu.Lock()
		setAfterUpsertHooks = append(setAfterUpsertHooks, setHook)
		setAfterUpsertMu.Unlock()
	}
}

// One returns a single set record from the query.
func (q setQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Set, error) {
	o := &Set{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Set records from the query.
func (q setQuery) All(ctx context.Context, exec boil.ContextExecutor) (SetSlice, error) {
	var o []*Set

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Set slice")
	}

	if len(setAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Set records in the query.
func (q setQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q setQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if sets exists")
	}

	return count > 0, nil
}

// Exercise pointed to by the foreign key.
func (o *Set) Exercise(mods ...qm.QueryMod) exerciseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExerciseID),
	}

	queryMods = append(queryMods, mods...)

	return Exercises(queryMods...)
}

// Workout pointed to by the foreign key.
func (o *Set) Workout(mods ...qm.QueryMod) workoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WorkoutID),
	}

	queryMods = append(queryMods, mods...)

	return Workouts(queryMods...)
}

// LoadExercise allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (setL) LoadExercise(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSet interface{}, mods queries.Applicator) error {
	var slice []*Set
	var object *Set

	if singular {
		var ok bool
		object, ok = maybeSet.(*Set)
		if !ok {
			object = new(Set)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSet))
			}
		}
	} else {
		s, ok := maybeSet.(*[]*Set)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &setR{}
		}
		args[object.ExerciseID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &setR{}
			}

			args[obj.ExerciseID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.exercises`),
		qm.WhereIn(`getstronger.exercises.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exercise")
	}

	var resultSlice []*Exercise
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exercise")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exercises")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exercises")
	}

	if len(exerciseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exercise = foreign
		if foreign.R == nil {
			foreign.R = &exerciseR{}
		}
		foreign.R.Sets = append(foreign.R.Sets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExerciseID == foreign.ID {
				local.R.Exercise = foreign
				if foreign.R == nil {
					foreign.R = &exerciseR{}
				}
				foreign.R.Sets = append(foreign.R.Sets, local)
				break
			}
		}
	}

	return nil
}

// LoadWorkout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (setL) LoadWorkout(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSet interface{}, mods queries.Applicator) error {
	var slice []*Set
	var object *Set

	if singular {
		var ok bool
		object, ok = maybeSet.(*Set)
		if !ok {
			object = new(Set)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSet))
			}
		}
	} else {
		s, ok := maybeSet.(*[]*Set)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &setR{}
		}
		args[object.WorkoutID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &setR{}
			}

			args[obj.WorkoutID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.workouts`),
		qm.WhereIn(`getstronger.workouts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Workout")
	}

	var resultSlice []*Workout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Workout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for workouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for workouts")
	}

	if len(workoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Workout = foreign
		if foreign.R == nil {
			foreign.R = &workoutR{}
		}
		foreign.R.Sets = append(foreign.R.Sets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkoutID == foreign.ID {
				local.R.Workout = foreign
				if foreign.R == nil {
					foreign.R = &workoutR{}
				}
				foreign.R.Sets = append(foreign.R.Sets, local)
				break
			}
		}
	}

	return nil
}

// SetExercise of the set to the related item.
// Sets o.R.Exercise to related.
// Adds o to related.R.Sets.
func (o *Set) SetExercise(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exercise) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exercise_id"}),
		strmangle.WhereClause("\"", "\"", 2, setPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExerciseID = related.ID
	if o.R == nil {
		o.R = &setR{
			Exercise: related,
		}
	} else {
		o.R.Exercise = related
	}

	if related.R == nil {
		related.R = &exerciseR{
			Sets: SetSlice{o},
		}
	} else {
		related.R.Sets = append(related.R.Sets, o)
	}

	return nil
}

// SetWorkout of the set to the related item.
// Sets o.R.Workout to related.
// Adds o to related.R.Sets.
func (o *Set) SetWorkout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Workout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"workout_id"}),
		strmangle.WhereClause("\"", "\"", 2, setPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkoutID = related.ID
	if o.R == nil {
		o.R = &setR{
			Workout: related,
		}
	} else {
		o.R.Workout = related
	}

	if related.R == nil {
		related.R = &workoutR{
			Sets: SetSlice{o},
		}
	} else {
		related.R.Sets = append(related.R.Sets, o)
	}

	return nil
}

// Sets retrieves all the records using an executor.
func Sets(mods ...qm.QueryMod) setQuery {
	mods = append(mods, qm.From("\"getstronger\".\"sets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"getstronger\".\"sets\".*"})
	}

	return setQuery{q}
}

// FindSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSet(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Set, error) {
	setObj := &Set{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"getstronger\".\"sets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, setObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from sets")
	}

	if err = setObj.doAfterSelectHooks(ctx, exec); err != nil {
		return setObj, err
	}

	return setObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Set) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no sets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	setInsertCacheMut.RLock()
	cache, cached := setInsertCache[key]
	setInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			setAllColumns,
			setColumnsWithDefault,
			setColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(setType, setMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(setType, setMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"getstronger\".\"sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"getstronger\".\"sets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into sets")
	}

	if !cached {
		setInsertCacheMut.Lock()
		setInsertCache[key] = cache
		setInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Set.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Set) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	setUpdateCacheMut.RLock()
	cache, cached := setUpdateCache[key]
	setUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			setAllColumns,
			setPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"getstronger\".\"sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, setPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(setType, setMapping, append(wl, setPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for sets")
	}

	if !cached {
		setUpdateCacheMut.Lock()
		setUpdateCache[key] = cache
		setUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q setQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"getstronger\".\"sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, setPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in set slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all set")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Set) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no sets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	setUpsertCacheMut.RLock()
	cache, cached := setUpsertCache[key]
	setUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			setAllColumns,
			setColumnsWithDefault,
			setColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			setAllColumns,
			setPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert sets, could not build update column list")
		}

		ret := strmangle.SetComplement(setAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(setPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert sets, could not build conflict column list")
			}

			conflict = make([]string, len(setPrimaryKeyColumns))
			copy(conflict, setPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"getstronger\".\"sets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(setType, setMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(setType, setMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert sets")
	}

	if !cached {
		setUpsertCacheMut.Lock()
		setUpsertCache[key] = cache
		setUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Set record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Set) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Set provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), setPrimaryKeyMapping)
	sql := "DELETE FROM \"getstronger\".\"sets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q setQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no setQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(setBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"getstronger\".\"sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from set slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for sets")
	}

	if len(setAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Set) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"getstronger\".\"sets\".* FROM \"getstronger\".\"sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in SetSlice")
	}

	*o = slice

	return nil
}

// SetExists checks if the Set row exists.
func SetExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"getstronger\".\"sets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if sets exists")
	}

	return exists, nil
}

// Exists checks if the Set row exists.
func (o *Set) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SetExists(ctx, exec, o.ID)
}
