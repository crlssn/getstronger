// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/shared.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.ExerciseSets
 */
export class ExerciseSets extends Message<ExerciseSets> {
  /**
   * @generated from field: string exercise_id = 1;
   */
  exerciseId = "";

  /**
   * @generated from field: repeated api.v1.Set sets = 2;
   */
  sets: Set[] = [];

  constructor(data?: PartialMessage<ExerciseSets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ExerciseSets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exercise_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sets", kind: "message", T: Set, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExerciseSets {
    return new ExerciseSets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExerciseSets {
    return new ExerciseSets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExerciseSets {
    return new ExerciseSets().fromJsonString(jsonString, options);
  }

  static equals(a: ExerciseSets | PlainMessage<ExerciseSets> | undefined, b: ExerciseSets | PlainMessage<ExerciseSets> | undefined): boolean {
    return proto3.util.equals(ExerciseSets, a, b);
  }
}

/**
 * @generated from message api.v1.Set
 */
export class Set extends Message<Set> {
  /**
   * The weight can be less than zero.
   *
   * @generated from field: double weight = 1;
   */
  weight = 0;

  /**
   * @generated from field: int32 reps = 2;
   */
  reps = 0;

  constructor(data?: PartialMessage<Set>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Set";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "weight", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "reps", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Set {
    return new Set().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Set {
    return new Set().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Set {
    return new Set().fromJsonString(jsonString, options);
  }

  static equals(a: Set | PlainMessage<Set> | undefined, b: Set | PlainMessage<Set> | undefined): boolean {
    return proto3.util.equals(Set, a, b);
  }
}

