// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/users.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.FollowRequest
 */
export class FollowRequest extends Message<FollowRequest> {
  /**
   * @generated from field: string follow_id = 1;
   */
  followId = "";

  constructor(data?: PartialMessage<FollowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.FollowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "follow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FollowRequest {
    return new FollowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FollowRequest {
    return new FollowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FollowRequest {
    return new FollowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FollowRequest | PlainMessage<FollowRequest> | undefined, b: FollowRequest | PlainMessage<FollowRequest> | undefined): boolean {
    return proto3.util.equals(FollowRequest, a, b);
  }
}

/**
 * @generated from message api.v1.FollowResponse
 */
export class FollowResponse extends Message<FollowResponse> {
  constructor(data?: PartialMessage<FollowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.FollowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FollowResponse {
    return new FollowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FollowResponse {
    return new FollowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FollowResponse {
    return new FollowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FollowResponse | PlainMessage<FollowResponse> | undefined, b: FollowResponse | PlainMessage<FollowResponse> | undefined): boolean {
    return proto3.util.equals(FollowResponse, a, b);
  }
}

/**
 * @generated from message api.v1.UnfollowRequest
 */
export class UnfollowRequest extends Message<UnfollowRequest> {
  /**
   * @generated from field: string unfollow_id = 1;
   */
  unfollowId = "";

  constructor(data?: PartialMessage<UnfollowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UnfollowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unfollow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnfollowRequest {
    return new UnfollowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnfollowRequest {
    return new UnfollowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnfollowRequest {
    return new UnfollowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnfollowRequest | PlainMessage<UnfollowRequest> | undefined, b: UnfollowRequest | PlainMessage<UnfollowRequest> | undefined): boolean {
    return proto3.util.equals(UnfollowRequest, a, b);
  }
}

/**
 * @generated from message api.v1.UnfollowResponse
 */
export class UnfollowResponse extends Message<UnfollowResponse> {
  constructor(data?: PartialMessage<UnfollowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UnfollowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnfollowResponse {
    return new UnfollowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnfollowResponse {
    return new UnfollowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnfollowResponse {
    return new UnfollowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnfollowResponse | PlainMessage<UnfollowResponse> | undefined, b: UnfollowResponse | PlainMessage<UnfollowResponse> | undefined): boolean {
    return proto3.util.equals(UnfollowResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ListFollowersRequest
 */
export class ListFollowersRequest extends Message<ListFollowersRequest> {
  /**
   * @generated from field: string follower_id = 1;
   */
  followerId = "";

  constructor(data?: PartialMessage<ListFollowersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListFollowersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "follower_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFollowersRequest {
    return new ListFollowersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFollowersRequest {
    return new ListFollowersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFollowersRequest {
    return new ListFollowersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFollowersRequest | PlainMessage<ListFollowersRequest> | undefined, b: ListFollowersRequest | PlainMessage<ListFollowersRequest> | undefined): boolean {
    return proto3.util.equals(ListFollowersRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ListFollowersResponse
 */
export class ListFollowersResponse extends Message<ListFollowersResponse> {
  /**
   * @generated from field: repeated api.v1.User followers = 1;
   */
  followers: User[] = [];

  constructor(data?: PartialMessage<ListFollowersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListFollowersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "followers", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFollowersResponse {
    return new ListFollowersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFollowersResponse {
    return new ListFollowersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFollowersResponse {
    return new ListFollowersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFollowersResponse | PlainMessage<ListFollowersResponse> | undefined, b: ListFollowersResponse | PlainMessage<ListFollowersResponse> | undefined): boolean {
    return proto3.util.equals(ListFollowersResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ListFolloweesRequest
 */
export class ListFolloweesRequest extends Message<ListFolloweesRequest> {
  /**
   * @generated from field: string followee_id = 1;
   */
  followeeId = "";

  constructor(data?: PartialMessage<ListFolloweesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListFolloweesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "followee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFolloweesRequest {
    return new ListFolloweesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFolloweesRequest {
    return new ListFolloweesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFolloweesRequest {
    return new ListFolloweesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFolloweesRequest | PlainMessage<ListFolloweesRequest> | undefined, b: ListFolloweesRequest | PlainMessage<ListFolloweesRequest> | undefined): boolean {
    return proto3.util.equals(ListFolloweesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ListFolloweesResponse
 */
export class ListFolloweesResponse extends Message<ListFolloweesResponse> {
  /**
   * @generated from field: repeated api.v1.User followees = 1;
   */
  followees: User[] = [];

  constructor(data?: PartialMessage<ListFolloweesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListFolloweesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "followees", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFolloweesResponse {
    return new ListFolloweesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFolloweesResponse {
    return new ListFolloweesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFolloweesResponse {
    return new ListFolloweesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFolloweesResponse | PlainMessage<ListFolloweesResponse> | undefined, b: ListFolloweesResponse | PlainMessage<ListFolloweesResponse> | undefined): boolean {
    return proto3.util.equals(ListFolloweesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

