// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Routine is an object representing the database table.
type Routine struct {
	ID            string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID        string     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title         string     `boil:"title" json:"title" toml:"title" yaml:"title"`
	CreatedAt     time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt     null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ExerciseOrder types.JSON `boil:"exercise_order" json:"exercise_order" toml:"exercise_order" yaml:"exercise_order"`

	R *routineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L routineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoutineColumns = struct {
	ID            string
	UserID        string
	Title         string
	CreatedAt     string
	DeletedAt     string
	ExerciseOrder string
}{
	ID:            "id",
	UserID:        "user_id",
	Title:         "title",
	CreatedAt:     "created_at",
	DeletedAt:     "deleted_at",
	ExerciseOrder: "exercise_order",
}

var RoutineTableColumns = struct {
	ID            string
	UserID        string
	Title         string
	CreatedAt     string
	DeletedAt     string
	ExerciseOrder string
}{
	ID:            "routines.id",
	UserID:        "routines.user_id",
	Title:         "routines.title",
	CreatedAt:     "routines.created_at",
	DeletedAt:     "routines.deleted_at",
	ExerciseOrder: "routines.exercise_order",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var RoutineWhere = struct {
	ID            whereHelperstring
	UserID        whereHelperstring
	Title         whereHelperstring
	CreatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
	ExerciseOrder whereHelpertypes_JSON
}{
	ID:            whereHelperstring{field: "\"getstronger\".\"routines\".\"id\""},
	UserID:        whereHelperstring{field: "\"getstronger\".\"routines\".\"user_id\""},
	Title:         whereHelperstring{field: "\"getstronger\".\"routines\".\"title\""},
	CreatedAt:     whereHelpertime_Time{field: "\"getstronger\".\"routines\".\"created_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"getstronger\".\"routines\".\"deleted_at\""},
	ExerciseOrder: whereHelpertypes_JSON{field: "\"getstronger\".\"routines\".\"exercise_order\""},
}

// RoutineRels is where relationship names are stored.
var RoutineRels = struct {
	User      string
	Exercises string
}{
	User:      "User",
	Exercises: "Exercises",
}

// routineR is where relationships are stored.
type routineR struct {
	User      *User         `boil:"User" json:"User" toml:"User" yaml:"User"`
	Exercises ExerciseSlice `boil:"Exercises" json:"Exercises" toml:"Exercises" yaml:"Exercises"`
}

// NewStruct creates a new relationship struct
func (*routineR) NewStruct() *routineR {
	return &routineR{}
}

func (r *routineR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *routineR) GetExercises() ExerciseSlice {
	if r == nil {
		return nil
	}
	return r.Exercises
}

// routineL is where Load methods for each relationship are stored.
type routineL struct{}

var (
	routineAllColumns            = []string{"id", "user_id", "title", "created_at", "deleted_at", "exercise_order"}
	routineColumnsWithoutDefault = []string{"user_id", "title"}
	routineColumnsWithDefault    = []string{"id", "created_at", "deleted_at", "exercise_order"}
	routinePrimaryKeyColumns     = []string{"id"}
	routineGeneratedColumns      = []string{}
)

type (
	// RoutineSlice is an alias for a slice of pointers to Routine.
	// This should almost always be used instead of []Routine.
	RoutineSlice []*Routine
	// RoutineHook is the signature for custom Routine hook methods
	RoutineHook func(context.Context, boil.ContextExecutor, *Routine) error

	routineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	routineType                 = reflect.TypeOf(&Routine{})
	routineMapping              = queries.MakeStructMapping(routineType)
	routinePrimaryKeyMapping, _ = queries.BindMapping(routineType, routineMapping, routinePrimaryKeyColumns)
	routineInsertCacheMut       sync.RWMutex
	routineInsertCache          = make(map[string]insertCache)
	routineUpdateCacheMut       sync.RWMutex
	routineUpdateCache          = make(map[string]updateCache)
	routineUpsertCacheMut       sync.RWMutex
	routineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var routineAfterSelectMu sync.Mutex
var routineAfterSelectHooks []RoutineHook

var routineBeforeInsertMu sync.Mutex
var routineBeforeInsertHooks []RoutineHook
var routineAfterInsertMu sync.Mutex
var routineAfterInsertHooks []RoutineHook

var routineBeforeUpdateMu sync.Mutex
var routineBeforeUpdateHooks []RoutineHook
var routineAfterUpdateMu sync.Mutex
var routineAfterUpdateHooks []RoutineHook

var routineBeforeDeleteMu sync.Mutex
var routineBeforeDeleteHooks []RoutineHook
var routineAfterDeleteMu sync.Mutex
var routineAfterDeleteHooks []RoutineHook

var routineBeforeUpsertMu sync.Mutex
var routineBeforeUpsertHooks []RoutineHook
var routineAfterUpsertMu sync.Mutex
var routineAfterUpsertHooks []RoutineHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Routine) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Routine) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Routine) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Routine) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Routine) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Routine) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Routine) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Routine) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Routine) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoutineHook registers your hook function for all future operations.
func AddRoutineHook(hookPoint boil.HookPoint, routineHook RoutineHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		routineAfterSelectMu.Lock()
		routineAfterSelectHooks = append(routineAfterSelectHooks, routineHook)
		routineAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		routineBeforeInsertMu.Lock()
		routineBeforeInsertHooks = append(routineBeforeInsertHooks, routineHook)
		routineBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		routineAfterInsertMu.Lock()
		routineAfterInsertHooks = append(routineAfterInsertHooks, routineHook)
		routineAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		routineBeforeUpdateMu.Lock()
		routineBeforeUpdateHooks = append(routineBeforeUpdateHooks, routineHook)
		routineBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		routineAfterUpdateMu.Lock()
		routineAfterUpdateHooks = append(routineAfterUpdateHooks, routineHook)
		routineAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		routineBeforeDeleteMu.Lock()
		routineBeforeDeleteHooks = append(routineBeforeDeleteHooks, routineHook)
		routineBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		routineAfterDeleteMu.Lock()
		routineAfterDeleteHooks = append(routineAfterDeleteHooks, routineHook)
		routineAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		routineBeforeUpsertMu.Lock()
		routineBeforeUpsertHooks = append(routineBeforeUpsertHooks, routineHook)
		routineBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		routineAfterUpsertMu.Lock()
		routineAfterUpsertHooks = append(routineAfterUpsertHooks, routineHook)
		routineAfterUpsertMu.Unlock()
	}
}

// One returns a single routine record from the query.
func (q routineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Routine, error) {
	o := &Routine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for routines")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Routine records from the query.
func (q routineQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoutineSlice, error) {
	var o []*Routine

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Routine slice")
	}

	if len(routineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Routine records in the query.
func (q routineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count routines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q routineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if routines exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Routine) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Exercises retrieves all the exercise's Exercises with an executor.
func (o *Routine) Exercises(mods ...qm.QueryMod) exerciseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"getstronger\".\"routine_exercises\" on \"getstronger\".\"exercises\".\"id\" = \"getstronger\".\"routine_exercises\".\"exercise_id\""),
		qm.Where("\"getstronger\".\"routine_exercises\".\"routine_id\"=?", o.ID),
	)

	return Exercises(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routineL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutine interface{}, mods queries.Applicator) error {
	var slice []*Routine
	var object *Routine

	if singular {
		var ok bool
		object, ok = maybeRoutine.(*Routine)
		if !ok {
			object = new(Routine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoutine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoutine))
			}
		}
	} else {
		s, ok := maybeRoutine.(*[]*Routine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoutine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoutine))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &routineR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routineR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.users`),
		qm.WhereIn(`getstronger.users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Routines = append(foreign.R.Routines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Routines = append(foreign.R.Routines, local)
				break
			}
		}
	}

	return nil
}

// LoadExercises allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routineL) LoadExercises(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutine interface{}, mods queries.Applicator) error {
	var slice []*Routine
	var object *Routine

	if singular {
		var ok bool
		object, ok = maybeRoutine.(*Routine)
		if !ok {
			object = new(Routine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoutine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoutine))
			}
		}
	} else {
		s, ok := maybeRoutine.(*[]*Routine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoutine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoutine))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &routineR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routineR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"getstronger\".\"exercises\".\"id\", \"getstronger\".\"exercises\".\"user_id\", \"getstronger\".\"exercises\".\"title\", \"getstronger\".\"exercises\".\"sub_title\", \"getstronger\".\"exercises\".\"created_at\", \"getstronger\".\"exercises\".\"deleted_at\", \"a\".\"routine_id\""),
		qm.From("\"getstronger\".\"exercises\""),
		qm.InnerJoin("\"getstronger\".\"routine_exercises\" as \"a\" on \"getstronger\".\"exercises\".\"id\" = \"a\".\"exercise_id\""),
		qm.WhereIn("\"a\".\"routine_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exercises")
	}

	var resultSlice []*Exercise

	var localJoinCols []string
	for results.Next() {
		one := new(Exercise)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.UserID, &one.Title, &one.SubTitle, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for exercises")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice exercises")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exercises")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exercises")
	}

	if len(exerciseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Exercises = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &exerciseR{}
			}
			foreign.R.Routines = append(foreign.R.Routines, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Exercises = append(local.R.Exercises, foreign)
				if foreign.R == nil {
					foreign.R = &exerciseR{}
				}
				foreign.R.Routines = append(foreign.R.Routines, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the routine to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Routines.
func (o *Routine) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"routines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, routinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &routineR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Routines: RoutineSlice{o},
		}
	} else {
		related.R.Routines = append(related.R.Routines, o)
	}

	return nil
}

// AddExercises adds the given related objects to the existing relationships
// of the routine, optionally inserting them as new records.
// Appends related to o.R.Exercises.
// Sets related.R.Routines appropriately.
func (o *Routine) AddExercises(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Exercise) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"getstronger\".\"routine_exercises\" (\"routine_id\", \"exercise_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &routineR{
			Exercises: related,
		}
	} else {
		o.R.Exercises = append(o.R.Exercises, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &exerciseR{
				Routines: RoutineSlice{o},
			}
		} else {
			rel.R.Routines = append(rel.R.Routines, o)
		}
	}
	return nil
}

// SetExercises removes all previously related items of the
// routine replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Routines's Exercises accordingly.
// Replaces o.R.Exercises with related.
// Sets related.R.Routines's Exercises accordingly.
func (o *Routine) SetExercises(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Exercise) error {
	query := "delete from \"getstronger\".\"routine_exercises\" where \"routine_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeExercisesFromRoutinesSlice(o, related)
	if o.R != nil {
		o.R.Exercises = nil
	}

	return o.AddExercises(ctx, exec, insert, related...)
}

// RemoveExercises relationships from objects passed in.
// Removes related items from R.Exercises (uses pointer comparison, removal does not keep order)
// Sets related.R.Routines.
func (o *Routine) RemoveExercises(ctx context.Context, exec boil.ContextExecutor, related ...*Exercise) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"getstronger\".\"routine_exercises\" where \"routine_id\" = $1 and \"exercise_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeExercisesFromRoutinesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Exercises {
			if rel != ri {
				continue
			}

			ln := len(o.R.Exercises)
			if ln > 1 && i < ln-1 {
				o.R.Exercises[i] = o.R.Exercises[ln-1]
			}
			o.R.Exercises = o.R.Exercises[:ln-1]
			break
		}
	}

	return nil
}

func removeExercisesFromRoutinesSlice(o *Routine, related []*Exercise) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Routines {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Routines)
			if ln > 1 && i < ln-1 {
				rel.R.Routines[i] = rel.R.Routines[ln-1]
			}
			rel.R.Routines = rel.R.Routines[:ln-1]
			break
		}
	}
}

// Routines retrieves all the records using an executor.
func Routines(mods ...qm.QueryMod) routineQuery {
	mods = append(mods, qm.From("\"getstronger\".\"routines\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"getstronger\".\"routines\".*"})
	}

	return routineQuery{q}
}

// FindRoutine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoutine(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Routine, error) {
	routineObj := &Routine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"getstronger\".\"routines\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, routineObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from routines")
	}

	if err = routineObj.doAfterSelectHooks(ctx, exec); err != nil {
		return routineObj, err
	}

	return routineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Routine) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no routines provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	routineInsertCacheMut.RLock()
	cache, cached := routineInsertCache[key]
	routineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			routineAllColumns,
			routineColumnsWithDefault,
			routineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(routineType, routineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(routineType, routineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"getstronger\".\"routines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"getstronger\".\"routines\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into routines")
	}

	if !cached {
		routineInsertCacheMut.Lock()
		routineInsertCache[key] = cache
		routineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Routine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Routine) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	routineUpdateCacheMut.RLock()
	cache, cached := routineUpdateCache[key]
	routineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			routineAllColumns,
			routinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update routines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"getstronger\".\"routines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, routinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(routineType, routineMapping, append(wl, routinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update routines row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for routines")
	}

	if !cached {
		routineUpdateCacheMut.Lock()
		routineUpdateCache[key] = cache
		routineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q routineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for routines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for routines")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoutineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"getstronger\".\"routines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, routinePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in routine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all routine")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Routine) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no routines provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	routineUpsertCacheMut.RLock()
	cache, cached := routineUpsertCache[key]
	routineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			routineAllColumns,
			routineColumnsWithDefault,
			routineColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			routineAllColumns,
			routinePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert routines, could not build update column list")
		}

		ret := strmangle.SetComplement(routineAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(routinePrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert routines, could not build conflict column list")
			}

			conflict = make([]string, len(routinePrimaryKeyColumns))
			copy(conflict, routinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"getstronger\".\"routines\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(routineType, routineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(routineType, routineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert routines")
	}

	if !cached {
		routineUpsertCacheMut.Lock()
		routineUpsertCache[key] = cache
		routineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Routine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Routine) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Routine provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), routinePrimaryKeyMapping)
	sql := "DELETE FROM \"getstronger\".\"routines\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from routines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for routines")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q routineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no routineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from routines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for routines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoutineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(routineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"getstronger\".\"routines\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, routinePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from routine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for routines")
	}

	if len(routineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Routine) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoutine(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoutineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoutineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"getstronger\".\"routines\".* FROM \"getstronger\".\"routines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in RoutineSlice")
	}

	*o = slice

	return nil
}

// RoutineExists checks if the Routine row exists.
func RoutineExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"getstronger\".\"routines\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if routines exists")
	}

	return exists, nil
}

// Exists checks if the Routine row exists.
func (o *Routine) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoutineExists(ctx, exec, o.ID)
}
