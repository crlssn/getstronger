// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoutineExercisesSortOrder is an object representing the database table.
type RoutineExercisesSortOrder struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoutineID  string `boil:"routine_id" json:"routine_id" toml:"routine_id" yaml:"routine_id"`
	ExerciseID string `boil:"exercise_id" json:"exercise_id" toml:"exercise_id" yaml:"exercise_id"`
	SortOrder  int    `boil:"sort_order" json:"sort_order" toml:"sort_order" yaml:"sort_order"`

	R *routineExercisesSortOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L routineExercisesSortOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoutineExercisesSortOrderColumns = struct {
	ID         string
	RoutineID  string
	ExerciseID string
	SortOrder  string
}{
	ID:         "id",
	RoutineID:  "routine_id",
	ExerciseID: "exercise_id",
	SortOrder:  "sort_order",
}

var RoutineExercisesSortOrderTableColumns = struct {
	ID         string
	RoutineID  string
	ExerciseID string
	SortOrder  string
}{
	ID:         "routine_exercises_sort_order.id",
	RoutineID:  "routine_exercises_sort_order.routine_id",
	ExerciseID: "routine_exercises_sort_order.exercise_id",
	SortOrder:  "routine_exercises_sort_order.sort_order",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RoutineExercisesSortOrderWhere = struct {
	ID         whereHelperstring
	RoutineID  whereHelperstring
	ExerciseID whereHelperstring
	SortOrder  whereHelperint
}{
	ID:         whereHelperstring{field: "\"getstronger\".\"routine_exercises_sort_order\".\"id\""},
	RoutineID:  whereHelperstring{field: "\"getstronger\".\"routine_exercises_sort_order\".\"routine_id\""},
	ExerciseID: whereHelperstring{field: "\"getstronger\".\"routine_exercises_sort_order\".\"exercise_id\""},
	SortOrder:  whereHelperint{field: "\"getstronger\".\"routine_exercises_sort_order\".\"sort_order\""},
}

// RoutineExercisesSortOrderRels is where relationship names are stored.
var RoutineExercisesSortOrderRels = struct {
	Exercise string
	Routine  string
}{
	Exercise: "Exercise",
	Routine:  "Routine",
}

// routineExercisesSortOrderR is where relationships are stored.
type routineExercisesSortOrderR struct {
	Exercise *Exercise `boil:"Exercise" json:"Exercise" toml:"Exercise" yaml:"Exercise"`
	Routine  *Routine  `boil:"Routine" json:"Routine" toml:"Routine" yaml:"Routine"`
}

// NewStruct creates a new relationship struct
func (*routineExercisesSortOrderR) NewStruct() *routineExercisesSortOrderR {
	return &routineExercisesSortOrderR{}
}

func (r *routineExercisesSortOrderR) GetExercise() *Exercise {
	if r == nil {
		return nil
	}
	return r.Exercise
}

func (r *routineExercisesSortOrderR) GetRoutine() *Routine {
	if r == nil {
		return nil
	}
	return r.Routine
}

// routineExercisesSortOrderL is where Load methods for each relationship are stored.
type routineExercisesSortOrderL struct{}

var (
	routineExercisesSortOrderAllColumns            = []string{"id", "routine_id", "exercise_id", "sort_order"}
	routineExercisesSortOrderColumnsWithoutDefault = []string{"routine_id", "exercise_id", "sort_order"}
	routineExercisesSortOrderColumnsWithDefault    = []string{"id"}
	routineExercisesSortOrderPrimaryKeyColumns     = []string{"id"}
	routineExercisesSortOrderGeneratedColumns      = []string{}
)

type (
	// RoutineExercisesSortOrderSlice is an alias for a slice of pointers to RoutineExercisesSortOrder.
	// This should almost always be used instead of []RoutineExercisesSortOrder.
	RoutineExercisesSortOrderSlice []*RoutineExercisesSortOrder
	// RoutineExercisesSortOrderHook is the signature for custom RoutineExercisesSortOrder hook methods
	RoutineExercisesSortOrderHook func(context.Context, boil.ContextExecutor, *RoutineExercisesSortOrder) error

	routineExercisesSortOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	routineExercisesSortOrderType                 = reflect.TypeOf(&RoutineExercisesSortOrder{})
	routineExercisesSortOrderMapping              = queries.MakeStructMapping(routineExercisesSortOrderType)
	routineExercisesSortOrderPrimaryKeyMapping, _ = queries.BindMapping(routineExercisesSortOrderType, routineExercisesSortOrderMapping, routineExercisesSortOrderPrimaryKeyColumns)
	routineExercisesSortOrderInsertCacheMut       sync.RWMutex
	routineExercisesSortOrderInsertCache          = make(map[string]insertCache)
	routineExercisesSortOrderUpdateCacheMut       sync.RWMutex
	routineExercisesSortOrderUpdateCache          = make(map[string]updateCache)
	routineExercisesSortOrderUpsertCacheMut       sync.RWMutex
	routineExercisesSortOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var routineExercisesSortOrderAfterSelectMu sync.Mutex
var routineExercisesSortOrderAfterSelectHooks []RoutineExercisesSortOrderHook

var routineExercisesSortOrderBeforeInsertMu sync.Mutex
var routineExercisesSortOrderBeforeInsertHooks []RoutineExercisesSortOrderHook
var routineExercisesSortOrderAfterInsertMu sync.Mutex
var routineExercisesSortOrderAfterInsertHooks []RoutineExercisesSortOrderHook

var routineExercisesSortOrderBeforeUpdateMu sync.Mutex
var routineExercisesSortOrderBeforeUpdateHooks []RoutineExercisesSortOrderHook
var routineExercisesSortOrderAfterUpdateMu sync.Mutex
var routineExercisesSortOrderAfterUpdateHooks []RoutineExercisesSortOrderHook

var routineExercisesSortOrderBeforeDeleteMu sync.Mutex
var routineExercisesSortOrderBeforeDeleteHooks []RoutineExercisesSortOrderHook
var routineExercisesSortOrderAfterDeleteMu sync.Mutex
var routineExercisesSortOrderAfterDeleteHooks []RoutineExercisesSortOrderHook

var routineExercisesSortOrderBeforeUpsertMu sync.Mutex
var routineExercisesSortOrderBeforeUpsertHooks []RoutineExercisesSortOrderHook
var routineExercisesSortOrderAfterUpsertMu sync.Mutex
var routineExercisesSortOrderAfterUpsertHooks []RoutineExercisesSortOrderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoutineExercisesSortOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoutineExercisesSortOrder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoutineExercisesSortOrder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoutineExercisesSortOrder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoutineExercisesSortOrder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoutineExercisesSortOrder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoutineExercisesSortOrder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoutineExercisesSortOrder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoutineExercisesSortOrder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routineExercisesSortOrderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoutineExercisesSortOrderHook registers your hook function for all future operations.
func AddRoutineExercisesSortOrderHook(hookPoint boil.HookPoint, routineExercisesSortOrderHook RoutineExercisesSortOrderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		routineExercisesSortOrderAfterSelectMu.Lock()
		routineExercisesSortOrderAfterSelectHooks = append(routineExercisesSortOrderAfterSelectHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		routineExercisesSortOrderBeforeInsertMu.Lock()
		routineExercisesSortOrderBeforeInsertHooks = append(routineExercisesSortOrderBeforeInsertHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		routineExercisesSortOrderAfterInsertMu.Lock()
		routineExercisesSortOrderAfterInsertHooks = append(routineExercisesSortOrderAfterInsertHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		routineExercisesSortOrderBeforeUpdateMu.Lock()
		routineExercisesSortOrderBeforeUpdateHooks = append(routineExercisesSortOrderBeforeUpdateHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		routineExercisesSortOrderAfterUpdateMu.Lock()
		routineExercisesSortOrderAfterUpdateHooks = append(routineExercisesSortOrderAfterUpdateHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		routineExercisesSortOrderBeforeDeleteMu.Lock()
		routineExercisesSortOrderBeforeDeleteHooks = append(routineExercisesSortOrderBeforeDeleteHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		routineExercisesSortOrderAfterDeleteMu.Lock()
		routineExercisesSortOrderAfterDeleteHooks = append(routineExercisesSortOrderAfterDeleteHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		routineExercisesSortOrderBeforeUpsertMu.Lock()
		routineExercisesSortOrderBeforeUpsertHooks = append(routineExercisesSortOrderBeforeUpsertHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		routineExercisesSortOrderAfterUpsertMu.Lock()
		routineExercisesSortOrderAfterUpsertHooks = append(routineExercisesSortOrderAfterUpsertHooks, routineExercisesSortOrderHook)
		routineExercisesSortOrderAfterUpsertMu.Unlock()
	}
}

// One returns a single routineExercisesSortOrder record from the query.
func (q routineExercisesSortOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoutineExercisesSortOrder, error) {
	o := &RoutineExercisesSortOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for routine_exercises_sort_order")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoutineExercisesSortOrder records from the query.
func (q routineExercisesSortOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoutineExercisesSortOrderSlice, error) {
	var o []*RoutineExercisesSortOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to RoutineExercisesSortOrder slice")
	}

	if len(routineExercisesSortOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoutineExercisesSortOrder records in the query.
func (q routineExercisesSortOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count routine_exercises_sort_order rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q routineExercisesSortOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if routine_exercises_sort_order exists")
	}

	return count > 0, nil
}

// Exercise pointed to by the foreign key.
func (o *RoutineExercisesSortOrder) Exercise(mods ...qm.QueryMod) exerciseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExerciseID),
	}

	queryMods = append(queryMods, mods...)

	return Exercises(queryMods...)
}

// Routine pointed to by the foreign key.
func (o *RoutineExercisesSortOrder) Routine(mods ...qm.QueryMod) routineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoutineID),
	}

	queryMods = append(queryMods, mods...)

	return Routines(queryMods...)
}

// LoadExercise allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routineExercisesSortOrderL) LoadExercise(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutineExercisesSortOrder interface{}, mods queries.Applicator) error {
	var slice []*RoutineExercisesSortOrder
	var object *RoutineExercisesSortOrder

	if singular {
		var ok bool
		object, ok = maybeRoutineExercisesSortOrder.(*RoutineExercisesSortOrder)
		if !ok {
			object = new(RoutineExercisesSortOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoutineExercisesSortOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoutineExercisesSortOrder))
			}
		}
	} else {
		s, ok := maybeRoutineExercisesSortOrder.(*[]*RoutineExercisesSortOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoutineExercisesSortOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoutineExercisesSortOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &routineExercisesSortOrderR{}
		}
		args[object.ExerciseID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routineExercisesSortOrderR{}
			}

			args[obj.ExerciseID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.exercises`),
		qm.WhereIn(`getstronger.exercises.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exercise")
	}

	var resultSlice []*Exercise
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exercise")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exercises")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exercises")
	}

	if len(exerciseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exercise = foreign
		if foreign.R == nil {
			foreign.R = &exerciseR{}
		}
		foreign.R.RoutineExercisesSortOrders = append(foreign.R.RoutineExercisesSortOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExerciseID == foreign.ID {
				local.R.Exercise = foreign
				if foreign.R == nil {
					foreign.R = &exerciseR{}
				}
				foreign.R.RoutineExercisesSortOrders = append(foreign.R.RoutineExercisesSortOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadRoutine allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routineExercisesSortOrderL) LoadRoutine(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutineExercisesSortOrder interface{}, mods queries.Applicator) error {
	var slice []*RoutineExercisesSortOrder
	var object *RoutineExercisesSortOrder

	if singular {
		var ok bool
		object, ok = maybeRoutineExercisesSortOrder.(*RoutineExercisesSortOrder)
		if !ok {
			object = new(RoutineExercisesSortOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoutineExercisesSortOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoutineExercisesSortOrder))
			}
		}
	} else {
		s, ok := maybeRoutineExercisesSortOrder.(*[]*RoutineExercisesSortOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoutineExercisesSortOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoutineExercisesSortOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &routineExercisesSortOrderR{}
		}
		args[object.RoutineID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routineExercisesSortOrderR{}
			}

			args[obj.RoutineID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`getstronger.routines`),
		qm.WhereIn(`getstronger.routines.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Routine")
	}

	var resultSlice []*Routine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Routine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for routines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for routines")
	}

	if len(routineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Routine = foreign
		if foreign.R == nil {
			foreign.R = &routineR{}
		}
		foreign.R.RoutineExercisesSortOrders = append(foreign.R.RoutineExercisesSortOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoutineID == foreign.ID {
				local.R.Routine = foreign
				if foreign.R == nil {
					foreign.R = &routineR{}
				}
				foreign.R.RoutineExercisesSortOrders = append(foreign.R.RoutineExercisesSortOrders, local)
				break
			}
		}
	}

	return nil
}

// SetExercise of the routineExercisesSortOrder to the related item.
// Sets o.R.Exercise to related.
// Adds o to related.R.RoutineExercisesSortOrders.
func (o *RoutineExercisesSortOrder) SetExercise(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exercise) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"routine_exercises_sort_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exercise_id"}),
		strmangle.WhereClause("\"", "\"", 2, routineExercisesSortOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExerciseID = related.ID
	if o.R == nil {
		o.R = &routineExercisesSortOrderR{
			Exercise: related,
		}
	} else {
		o.R.Exercise = related
	}

	if related.R == nil {
		related.R = &exerciseR{
			RoutineExercisesSortOrders: RoutineExercisesSortOrderSlice{o},
		}
	} else {
		related.R.RoutineExercisesSortOrders = append(related.R.RoutineExercisesSortOrders, o)
	}

	return nil
}

// SetRoutine of the routineExercisesSortOrder to the related item.
// Sets o.R.Routine to related.
// Adds o to related.R.RoutineExercisesSortOrders.
func (o *RoutineExercisesSortOrder) SetRoutine(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Routine) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"getstronger\".\"routine_exercises_sort_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"routine_id"}),
		strmangle.WhereClause("\"", "\"", 2, routineExercisesSortOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoutineID = related.ID
	if o.R == nil {
		o.R = &routineExercisesSortOrderR{
			Routine: related,
		}
	} else {
		o.R.Routine = related
	}

	if related.R == nil {
		related.R = &routineR{
			RoutineExercisesSortOrders: RoutineExercisesSortOrderSlice{o},
		}
	} else {
		related.R.RoutineExercisesSortOrders = append(related.R.RoutineExercisesSortOrders, o)
	}

	return nil
}

// RoutineExercisesSortOrders retrieves all the records using an executor.
func RoutineExercisesSortOrders(mods ...qm.QueryMod) routineExercisesSortOrderQuery {
	mods = append(mods, qm.From("\"getstronger\".\"routine_exercises_sort_order\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"getstronger\".\"routine_exercises_sort_order\".*"})
	}

	return routineExercisesSortOrderQuery{q}
}

// FindRoutineExercisesSortOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoutineExercisesSortOrder(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RoutineExercisesSortOrder, error) {
	routineExercisesSortOrderObj := &RoutineExercisesSortOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"getstronger\".\"routine_exercises_sort_order\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, routineExercisesSortOrderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from routine_exercises_sort_order")
	}

	if err = routineExercisesSortOrderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return routineExercisesSortOrderObj, err
	}

	return routineExercisesSortOrderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoutineExercisesSortOrder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no routine_exercises_sort_order provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routineExercisesSortOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	routineExercisesSortOrderInsertCacheMut.RLock()
	cache, cached := routineExercisesSortOrderInsertCache[key]
	routineExercisesSortOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			routineExercisesSortOrderAllColumns,
			routineExercisesSortOrderColumnsWithDefault,
			routineExercisesSortOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(routineExercisesSortOrderType, routineExercisesSortOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(routineExercisesSortOrderType, routineExercisesSortOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"getstronger\".\"routine_exercises_sort_order\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"getstronger\".\"routine_exercises_sort_order\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into routine_exercises_sort_order")
	}

	if !cached {
		routineExercisesSortOrderInsertCacheMut.Lock()
		routineExercisesSortOrderInsertCache[key] = cache
		routineExercisesSortOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoutineExercisesSortOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoutineExercisesSortOrder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	routineExercisesSortOrderUpdateCacheMut.RLock()
	cache, cached := routineExercisesSortOrderUpdateCache[key]
	routineExercisesSortOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			routineExercisesSortOrderAllColumns,
			routineExercisesSortOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update routine_exercises_sort_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"getstronger\".\"routine_exercises_sort_order\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, routineExercisesSortOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(routineExercisesSortOrderType, routineExercisesSortOrderMapping, append(wl, routineExercisesSortOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update routine_exercises_sort_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for routine_exercises_sort_order")
	}

	if !cached {
		routineExercisesSortOrderUpdateCacheMut.Lock()
		routineExercisesSortOrderUpdateCache[key] = cache
		routineExercisesSortOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q routineExercisesSortOrderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for routine_exercises_sort_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for routine_exercises_sort_order")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoutineExercisesSortOrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routineExercisesSortOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"getstronger\".\"routine_exercises_sort_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, routineExercisesSortOrderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in routineExercisesSortOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all routineExercisesSortOrder")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoutineExercisesSortOrder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no routine_exercises_sort_order provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routineExercisesSortOrderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	routineExercisesSortOrderUpsertCacheMut.RLock()
	cache, cached := routineExercisesSortOrderUpsertCache[key]
	routineExercisesSortOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			routineExercisesSortOrderAllColumns,
			routineExercisesSortOrderColumnsWithDefault,
			routineExercisesSortOrderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			routineExercisesSortOrderAllColumns,
			routineExercisesSortOrderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert routine_exercises_sort_order, could not build update column list")
		}

		ret := strmangle.SetComplement(routineExercisesSortOrderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(routineExercisesSortOrderPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert routine_exercises_sort_order, could not build conflict column list")
			}

			conflict = make([]string, len(routineExercisesSortOrderPrimaryKeyColumns))
			copy(conflict, routineExercisesSortOrderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"getstronger\".\"routine_exercises_sort_order\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(routineExercisesSortOrderType, routineExercisesSortOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(routineExercisesSortOrderType, routineExercisesSortOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert routine_exercises_sort_order")
	}

	if !cached {
		routineExercisesSortOrderUpsertCacheMut.Lock()
		routineExercisesSortOrderUpsertCache[key] = cache
		routineExercisesSortOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoutineExercisesSortOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoutineExercisesSortOrder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no RoutineExercisesSortOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), routineExercisesSortOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"getstronger\".\"routine_exercises_sort_order\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from routine_exercises_sort_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for routine_exercises_sort_order")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q routineExercisesSortOrderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no routineExercisesSortOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from routine_exercises_sort_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for routine_exercises_sort_order")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoutineExercisesSortOrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(routineExercisesSortOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routineExercisesSortOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"getstronger\".\"routine_exercises_sort_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routineExercisesSortOrderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from routineExercisesSortOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for routine_exercises_sort_order")
	}

	if len(routineExercisesSortOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoutineExercisesSortOrder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoutineExercisesSortOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoutineExercisesSortOrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoutineExercisesSortOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routineExercisesSortOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"getstronger\".\"routine_exercises_sort_order\".* FROM \"getstronger\".\"routine_exercises_sort_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routineExercisesSortOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in RoutineExercisesSortOrderSlice")
	}

	*o = slice

	return nil
}

// RoutineExercisesSortOrderExists checks if the RoutineExercisesSortOrder row exists.
func RoutineExercisesSortOrderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"getstronger\".\"routine_exercises_sort_order\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if routine_exercises_sort_order exists")
	}

	return exists, nil
}

// Exists checks if the RoutineExercisesSortOrder row exists.
func (o *RoutineExercisesSortOrder) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoutineExercisesSortOrderExists(ctx, exec, o.ID)
}
